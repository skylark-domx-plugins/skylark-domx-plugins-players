{"version":3,"sources":["skylark-domx-plugins-players.js"],"names":["define","plugins","players","langx","styler","noder","eventer","$","toggles","Pip","Plugin","inherit","klassName","pluginName","options","classes","mini","unmini","selectors","pipButton","_construct","elm","prototype","call","this","$el","target","elmx","$pipButton","find","listenTo","togglePip","document","hide","targetEl","pictureInPicture","disabled","error","console","register","PlayControl","titles","play","pause","playButton","$media","_media","media","$playButton","togglePlay","updatePlayButton","stop","paused","ended","attr","removeClass","addClass","ranges","ProgressControl","Progress","progressBar","seek","seekTooltip","updateProgress","updateDuration","duration","Math","round","$seek","$progressBar","currentTime","floor","val","updateSeekTooltip","event","pos","pagePosition","$seekTooltip","css","pageX","left","skipAhead","TimeControl","timeElapsed","$timeElapsed","$duration","updateTimeElapsed","formatTime","timeInSeconds","result","Date","toISOString","substr","minutes","seconds","time","text","VolumeControl","volumeButton","volumeIcons","volumeMute","volumeLow","volumeHigh","volume","$volumeButton","$volumeIcons","$volumeMute","$volumeLow","$volumeHigh","$volume","updateVolumeIcon","updateVolume","toggleMute","muted","forEach","icon","data","show","medias","Fullscreen","ControlsBar","playbackIcons","timeControl","progressControl","volumeControl","fullscreenButton","fullscreenIcons","container","_playControl","instantiate","_timeControl","_progressControl","_volumeControl","_fullscreen","_pip","animates","PlaybackAnimation","playbackAnimation","$playbackAnimation","animatePlayback","animate","opacity","transform","VideoPlayer","video","videoControls","$video","$videoControls","_controlsBar","_playbackAnimation","showControls","hideControls","keyboardShortcuts","videoWorks","createElement","canPlayType","controls","load","source","title","url","href","type","posterUrl","poster","altText","_video","$play","_$play","$poster","_$poster","prop","src","alt","download","key","setTimeout","toggleFullScreen","main"],"mappings":"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","file":"../skylark-domx-plugins-players.js","sourcesContent":["define('skylark-domx-plugins-players/players',[\r\n    \"skylark-domx-plugins-base/plugins\"\r\n], function(plugins) {\r\n    'use strict';\r\n\r\n\treturn plugins.players = {};\r\n});\r\n\ndefine('skylark-domx-plugins-toggles/Pip',[\r\n  \"skylark-langx\",\r\n  \"skylark-domx-styler\",\r\n  \"skylark-domx-noder\",\r\n  \"skylark-domx-eventer\",\r\n  \"skylark-domx-query\",\r\n  \"skylark-domx-plugins-base\",\r\n  \"./toggles\"\r\n],function(langx,styler,noder, eventer,$ , plugins,toggles) {\r\n\r\n  'use strict'\r\n\r\n  var Pip = plugins.Plugin.inherit({\r\n    klassName : \"Pip\",\r\n\r\n    pluginName : \"domx.toggles.pip\",\r\n   \r\n    options : {\r\n      classes : {\r\n        mini : \"mini\",\r\n        unmini : \"unmini\"\r\n      },\r\n      selectors : {\r\n        pipButton : null //'.pip-button'\r\n      }\r\n    },\r\n\r\n\r\n    _construct: function(elm, options) {\r\n      //this.options = options\r\n      plugins.Plugin.prototype._construct.call(this,elm,options);\r\n\r\n      let $el = this.$(),\r\n          selectors = this.options.selectors,\r\n          target = this.target = this.elmx(this.options.target);\r\n\r\n      if (selectors.pipButton) {\r\n        this.$pipButton = $el.find(selectors.pipButton);\r\n      } else {\r\n        this.$pipButton = $el;\r\n      }\r\n\r\n\r\n      this.listenTo(this.$pipButton,'click',this.togglePip);\r\n\r\n      if (!('pictureInPictureEnabled' in document)) {\r\n          this.$pipButton.hide();\r\n      }\r\n\r\n    },\r\n\r\n    // togglePip toggles Picture-in-Picture mode on the video\r\n    togglePip : function () {\r\n      try {\r\n        let targetEl = this.target.elm();\r\n        if (targetEl !== noder.pictureInPicture()) {\r\n          this.$pipButton.disabled(true);\r\n          noder.pictureInPicture(targetEl)\r\n        } else {\r\n          noder.pictureInPicture(false)\r\n        }\r\n      } catch (error) {\r\n        console.error(error);\r\n      } finally {\r\n        this.$pipButton.disabled(false);\r\n      }\r\n    },\r\n\r\n  });\r\n\r\n  plugins.register(Pip);\r\n\r\n  return toggles.Pip = Pip;\r\n});\r\n\r\n\ndefine('skylark-domx-plugins-players/play-control',[\r\n  \"skylark-langx\",\r\n  \"skylark-domx-styler\",\r\n  \"skylark-domx-noder\",\r\n  \"skylark-domx-eventer\",\r\n  \"skylark-domx-query\",\r\n  \"skylark-domx-plugins-base\",\r\n  \"./players\"\r\n],function(langx,styler,noder, eventer,$ , plugins,players) {\r\n  'use strict'\r\n\r\n  'use strict'\r\n\r\n  var PlayControl = plugins.Plugin.inherit({\r\n    klassName : \"PlayControl\",\r\n\r\n    pluginName : \"domx.players.play_control\",\r\n   \r\n    options : {\r\n      titles : {\r\n        play  : \"Play (k)\",\r\n        pause : \"Pause (k)\"\r\n      },\r\n      classes : {\r\n        play : \"play\",\r\n        pause : \"pause\"\r\n      },\r\n      selectors : {\r\n        playButton : null\r\n      }\r\n    },\r\n\r\n\r\n    _construct: function(elm, options) {\r\n      //this.options = options\r\n      plugins.Plugin.prototype._construct.call(this,elm,options);\r\n\r\n\r\n      let $el = this.$(),\r\n          selectors = this.options.selectors,\r\n          $media = this._media = this.options.media;\r\n\r\n      if (selectors.playButton) {\r\n        this.$playButton = $el.find(selectors.playButton);   \r\n      } else {\r\n        this.$playButton = $el;\r\n      }\r\n\r\n      this.listenTo($media,'click',this.togglePlay);\r\n      this.listenTo($media,'play,pause',this.updatePlayButton);\r\n      this.listenTo(this.$playButton,'click', this.togglePlay);\r\n      this.updatePlayButton();\r\n    },\r\n\r\n\r\n    play : function() {\r\n      this._media.play();\r\n\r\n    },\r\n\r\n    stop : function() {\r\n      this._media.stop();      \r\n    },\r\n\r\n    pause : function() {\r\n      this._media.pause();      \r\n    },\r\n\r\n    // togglePlay toggles the playback state of the video.\r\n    // If the video playback is paused or ended, the video is played\r\n    // otherwise, the video is paused\r\n    togglePlay : function () {\r\n      if (this._media.paused() || this._media.ended()) {\r\n        this._media.play();\r\n      } else {\r\n        this._media.pause();\r\n      }\r\n    },\r\n\r\n    // updatePlayButton updates the playback icon and tooltip\r\n    // depending on the playback state\r\n    updatePlayButton : function () {\r\n\r\n      if (this._media.paused()) {\r\n        this.$playButton.attr('data-title', this.options.titles.play);\r\n        this.$playButton.removeClass(this.options.classes.pause).addClass(this.options.classes.play);\r\n      } else {\r\n        this.$playButton.attr('data-title', this.options.titles.pause);\r\n        this.$playButton.removeClass(this.options.classes.play).addClass(this.options.classes.pause);\r\n      }\r\n    }\r\n\r\n  });\r\n\r\n  plugins.register(PlayControl);\r\n\r\n  return players.PlayControl = PlayControl;\r\n});\r\n\r\n\ndefine('skylark-domx-plugins-players/progress-control',[\r\n  \"skylark-langx\",\r\n  \"skylark-domx-styler\",\r\n  \"skylark-domx-noder\",\r\n  \"skylark-domx-eventer\",\r\n  \"skylark-domx-query\",\r\n  \"skylark-domx-plugins-base\",\r\n  \"skylark-domx-plugins-ranges\",\r\n  \"./players\"\r\n],function(langx,styler,noder, eventer,$ , plugins,ranges,players) {\r\n  'use strict'\r\n\r\n  var ProgressControl = ranges.Progress.inherit({\r\n    klassName : \"ProgressControl\",\r\n\r\n    pluginName : \"domx.players.progress_control\",\r\n   \r\n    options : {\r\n      selectors : {\r\n        progressBar : '.progress-bar',\r\n        seek : '.seek',\r\n        seekTooltip : '.seek-tooltip'\r\n      }\r\n    },\r\n\r\n\r\n    _construct: function(elm, options) {\r\n      ranges.Progress.prototype._construct.call(this,elm,options);\r\n\r\n      let $el = this.$(),\r\n          selectors = this.options.selectors,\r\n          $media = this._media = this.options.media;\r\n\r\n      // Add eventlisteners here\r\n      this.listenTo($media,'timeupdate',this.updateProgress);\r\n\r\n      this.listenTo($media,'loadedmetadata',this.updateDuration);\r\n\r\n    },\r\n\r\n    // initializeVideo sets the video duration, and maximum value of the\r\n    // progressBar\r\n    updateDuration : function () {\r\n    \tvar media = this._media;\r\n     \tconst duration = Math.round(media.duration());    \t\t\r\n     \tthis.$seek.attr('max', duration);\r\n     \tthis.$progressBar.attr('max', duration);\r\n    },\r\n\r\n\r\n    // updateProgress indicates how far through the video\r\n    // the current playback is by updating the progress bar\r\n    updateProgress : function () {\r\n\t\t  var media = this._media,\r\n\t\t\tcurrentTime = Math.floor(media.currentTime());\r\n      \tthis.$seek.val(currentTime);\r\n      \tthis.$progressBar.val(currentTime);\r\n    },\r\n\r\n    // updateSeekTooltip uses the position of the mouse on the progress bar to\r\n    // roughly work out what point in the video the user will skip to if\r\n    // the progress bar is clicked at that point\r\n    updateSeekTooltip : function (event) {\r\n      ranges.Progress.prototype.updateSeekTooltip.call(this,event);\r\n\r\n      //const rect = this._media.getBoundingClientRect();\r\n      const pos = this._media.pagePosition();\r\n      this.$seekTooltip.css(\"left\", `${event.pageX - pos.left}px`);\r\n    },\r\n\r\n    // skipAhead jumps to a different point in the video when the progress bar\r\n    // is clicked\r\n    skipAhead : function (event) {\r\n      ranges.Progress.prototype.skipAhead.call(this,event);\r\n\r\n      let media = this._media;\r\n      media.currentTime(this.$seek.val());\r\n    },\r\n\r\n\r\n  });\r\n\r\n  plugins.register(ProgressControl);\r\n\r\n  return players.ProgressControl = ProgressControl;\r\n});\ndefine('skylark-domx-plugins-players/time-control',[\r\n  \"skylark-langx\",\r\n  \"skylark-domx-styler\",\r\n  \"skylark-domx-noder\",\r\n  \"skylark-domx-eventer\",\r\n  \"skylark-domx-query\",\r\n  \"skylark-domx-plugins-base\"\r\n],function(langx,styler,noder, eventer,$ , plugins) {\r\n\r\n  'use strict'\r\n\r\n  var TimeControl = plugins.Plugin.inherit({\r\n    klassName : \"TimeControl\",\r\n\r\n    pluginName : \"domx.players.time_control\",\r\n   \r\n    options : {\r\n      selectors : {\r\n        timeElapsed : '.time-elapsed',\r\n        duration : '.duration'\r\n      }\r\n    },\r\n\r\n\r\n    _construct: function(elm, options) {\r\n      //this.options = options\r\n      plugins.Plugin.prototype._construct.call(this,elm,options);\r\n\r\n      let $el = this.$(),\r\n          selectors = this.options.selectors,\r\n          $media = this._media = this.options.media;\r\n\r\n\r\n      this.$timeElapsed = $el.find(selectors.timeElapsed);\r\n      this.$duration = $el.find(selectors.duration);\r\n\r\n      // Add eventlisteners here\r\n      this.listenTo($media,'timeupdate',this.updateTimeElapsed);\r\n      this.listenTo($media,'loadedmetadata',this.updateDuration);\r\n\r\n    },\r\n\r\n\r\n    // formatTime takes a time length in seconds and returns the time in\r\n    // minutes and seconds\r\n    formatTime : function (timeInSeconds) {\r\n      const result = new Date(timeInSeconds * 1000).toISOString().substr(11, 8);\r\n\r\n      return {\r\n        minutes: result.substr(3, 2),\r\n        seconds: result.substr(6, 2),\r\n      };\r\n    },\r\n\r\n    // initializeVideo sets the video duration, and maximum value of the\r\n    // progressBar\r\n    updateDuration : function () {\r\n      var media = this._media;\r\n      const duration = Math.round(media.duration()),\r\n           time = this.formatTime(duration);\r\n      this.$duration.text(`${time.minutes}:${time.seconds}`);\r\n      this.$duration.attr('datetime', `${time.minutes}m ${time.seconds}s`);\r\n    },\r\n\r\n    // updateTimeElapsed indicates how far through the video\r\n    // the current playback is by updating the timeElapsed element\r\n    updateTimeElapsed : function () {\r\n      const time = this.formatTime(Math.round(this._media.currentTime()));\r\n      this.$timeElapsed.text(`${time.minutes}:${time.seconds}`);\r\n      this.$timeElapsed.attr('datetime', `${time.minutes}m ${time.seconds}s`);\r\n    }\r\n  });\r\n\r\n  plugins.register(TimeControl);\r\n\r\n  return TimeControl;\r\n});\r\n\r\n\ndefine('skylark-domx-plugins-players/volume-control',[\r\n  \"skylark-langx\",\r\n  \"skylark-domx-styler\",\r\n  \"skylark-domx-noder\",\r\n  \"skylark-domx-eventer\",\r\n  \"skylark-domx-query\",\r\n  \"skylark-domx-plugins-base\",\r\n  \"./players\"\r\n],function(langx,styler,noder, eventer,$ , plugins,players) {\r\n\r\n  'use strict'\r\n\r\n  var VolumeControl = plugins.Plugin.inherit({\r\n    klassName : \"VolumeControl\",\r\n\r\n    pluginName : \"domx.players.volume_control\",\r\n   \r\n    options : {\r\n      selectors : {\r\n        volumeButton : '.volume-button',\r\n        volumeIcons : '.volume-button use',\r\n        volumeMute : 'use[href=\"#volume-mute\"]',\r\n        volumeLow : 'use[href=\"#volume-low\"]',\r\n        volumeHigh : 'use[href=\"#volume-high\"]',\r\n        volume : '.volume'\r\n      }\r\n    },\r\n\r\n\r\n    _construct: function(elm, options) {\r\n      //this.options = options\r\n      plugins.Plugin.prototype._construct.call(this,elm,options);\r\n\r\n      this._media = this.options.media;\r\n\r\n      let $el = this.$(),\r\n          selectors = this.options.selectors,\r\n          $media = this._media = this.options.media;\r\n\r\n      this.$volumeButton = $el.find(selectors.volumeButton);\r\n      this.$volumeIcons = $el.find(selectors.volumeIcons);\r\n      this.$volumeMute = $el.find(selectors.volumeMute);\r\n      this.$volumeLow = $el.find(selectors.volumeLow);\r\n      this.$volumeHigh = $el.find(selectors.volumeHigh);\r\n      this.$volume = $el.find(selectors.volume);\r\n\r\n      // Add eventlisteners here\r\n      this.listenTo($media,'volumechange',this.updateVolumeIcon);\r\n      this.listenTo(this.$volume,'input',this.updateVolume);\r\n      this.listenTo(this.$volumeButton,'click',this.toggleMute);\r\n\r\n      this.updateVolumeIcon();\r\n    },\r\n\r\n\r\n    // updateVolume updates the video's volume\r\n    // and disables the muted state if active\r\n    updateVolume : function () {\r\n      if (this._media.muted()) {\r\n        this._media.muted(false);\r\n      }\r\n\r\n      this._media.volume(this.$volume.val());\r\n    },\r\n\r\n    // updateVolumeIcon updates the volume icon so that it correctly reflects\r\n    // the volume of the video\r\n    updateVolumeIcon : function () {\r\n      this.$volumeIcons.forEach((icon) => {\r\n        $(icon).hide();\r\n      });\r\n\r\n      this.$volumeButton.data('title', 'Mute (m)');\r\n\r\n      if (this._media.muted() || this._media.volume() === 0) {\r\n        this.$volumeMute.show();\r\n        this.$volumeButton.data('title', 'Unmute (m)');\r\n      } else if (this._media.volume() > 0 && this._media.volume() <= 0.5) {\r\n        this.$volumeLow.show();\r\n      } else {\r\n        this.$volumeHigh.show();\r\n      }\r\n    },\r\n\r\n    // toggleMute mutes or unmutes the video when executed\r\n    // When the video is unmuted, the volume is returned to the value\r\n    // it was set to before the video was muted\r\n    toggleMute : function () {\r\n      this._media.muted(!this._media.muted());\r\n\r\n      if (this._media.muted()) {\r\n        this.$volume.data('volume', this.$volume.val());\r\n        this.$volume.val(0);\r\n      } else {\r\n        this.$volume.val(this.$volume.data(\"volume\"));\r\n      }\r\n    }\r\n  });\r\n\r\n  plugins.register(VolumeControl);\r\n\r\n  return players.VolumeControl = VolumeControl;\r\n});\r\n\r\n\ndefine('skylark-domx-plugins-players/controls-bar',[\r\n  \"skylark-langx\",\r\n  \"skylark-domx-styler\",\r\n  \"skylark-domx-noder\",\r\n  \"skylark-domx-eventer\",\r\n  \"skylark-domx-medias\",\r\n  \"skylark-domx-query\",\r\n  \"skylark-domx-plugins-base\",\r\n  \"skylark-domx-plugins-toggles/fullscreen\",\r\n  \"skylark-domx-plugins-toggles/Pip\",\r\n  \"./players\",\r\n  \"./play-control\",\r\n  \"./progress-control\",\r\n  \"./time-control\",\r\n  \"./volume-control\"\r\n],function(langx,styler,noder, eventer,medias,$ , plugins,Fullscreen,Pip,players,PlayControl,ProgressControl,TimeControl,VolumeControl) {\r\n\r\n  'use strict'\r\n\r\n  var ControlsBar = plugins.Plugin.inherit({\r\n    klassName : \"ControlsBar\",\r\n\r\n    pluginName : \"domx.players.controls_bar\",\r\n   \r\n    options : {\r\n      selectors : {\r\n\r\n        playButton : '.play-button',\r\n        playbackIcons : '.playback-icons use',\r\n\r\n        timeControl : \".time\",\r\n        timeElapsed : '.time-elapsed',\r\n        duration : '.duration',\r\n\r\n        progressControl : \".video-progress\",\r\n        progressBar : '.progress-bar',\r\n        seek : '.seek',\r\n        seekTooltip : '.seek-tooltip',\r\n\r\n        volumeControl : \".volume-control\",\r\n        volumeButton : '.volume-button',\r\n        volumeIcons : '.volume-button use',\r\n        volumeMute : 'use[href=\"#volume-mute\"]',\r\n        volumeLow : 'use[href=\"#volume-low\"]',\r\n        volumeHigh : 'use[href=\"#volume-high\"]',\r\n        volume : '.volume',\r\n\r\n        fullscreenButton : '.fullscreen-button',\r\n        fullscreenIcons : '.fullscreen-button use',\r\n\r\n        pipButton : '.pip-button'\r\n\r\n      }\r\n    },\r\n\r\n\r\n    _construct: function(elm, options) {\r\n      //this.options = options\r\n      plugins.Plugin.prototype._construct.call(this,elm,options);\r\n\r\n      let $el = this.$(),\r\n          selectors = this.options.selectors,\r\n          media = this.options.media,\r\n          container = this.options.container;\r\n\r\n\r\n      //this._playButton = $el.find(selectors.playButton)[0];\r\n      //this._playbackIcons = $el.find(selectors.playbackIcons);\r\n      this._playControl = PlayControl.instantiate($el.find(selectors.playButton)[0],{\r\n        media\r\n      });\r\n\r\n\r\n      //this._timeElapsed = $el.find(selectors.timeElapsed)[0];\r\n      //this._duration = $el.find(selectors.duration)[0];\r\n      this._timeControl = TimeControl.instantiate($el.find(selectors.timeControl)[0],{\r\n        media        \r\n      });\r\n      \r\n      //this._progressBar = $el.find(selectors.progressBar)[0];\r\n      //this._seek = $el.find(selectors.seek)[0];\r\n      //this._seekTooltip = $el.find(selectors.seekTooltip)[0];\r\n      this._progressControl = ProgressControl.instantiate($el.find(selectors.progressControl)[0],{\r\n        media      \r\n      });\r\n\r\n      //this._volumeButton = $el.find(selectors.volumeButton)[0];\r\n      //this._volumeIcons = $el.find(selectors.volumeIcons);\r\n      //this._volumeMute = $el.find(selectors.volumeMute)[0];\r\n      //this._volumeLow = $el.find(selectors.volumeLow)[0];\r\n      //this._volumeHigh = $el.find(selectors.volumeHigh)[0];\r\n      //this._volume = $el.find(selectors.volume)[0];\r\n      this._volumeControl = VolumeControl.instantiate($el.find(selectors.volumeControl)[0],{\r\n        media    \r\n      });\r\n      \r\n\r\n      //this._fullscreenButton = $el.find(selectors.fullscreenButton)[0];\r\n      //this._fullscreenIcons = $el.find(selectors.fullscreenIcons);\r\n      this._fullscreen = Fullscreen.instantiate($el.find(selectors.fullscreenButton)[0],{\r\n        target : container\r\n      });\r\n      \r\n      //this._pipButton = $el.find(selectors.pipButton)[0];\r\n      this._pip = Pip.instantiate($el.find(selectors.pipButton)[0],{\r\n        target : media       \r\n      });\r\n\r\n      // Add eventlisteners here\r\n      /*\r\n      this.listenTo($(this._playButton),'click', this.togglePlay);\r\n      this.listenTo($(this._video),'play',this.updatePlayButton);\r\n      this.listenTo($(this._video),'pause',this.updatePlayButton);\r\n      this.listenTo($(this._video),'loadedmetadata',this.initializeVideo);\r\n      this.listenTo($(this._video),'timeupdate',this.updateTimeElapsed);\r\n      this.listenTo($(this._video),'timeupdate',this.updateProgress);\r\n      this.listenTo($(this._video),'volumechange',this.updateVolumeIcon);\r\n      this.listenTo($(this._video),'click',this.togglePlay);\r\n      this.listenTo($(this._video),'click',this.animatePlayback);\r\n      this.listenTo($(this._video),'mouseenter',this.showControls);\r\n      this.listenTo($(this._video),'mouseleave',this.hideControls);\r\n      this.listenTo($(this._seek),'mousemove',this.updateSeekTooltip);\r\n      this.listenTo($(this._seek),'input',this.skipAhead);\r\n      this.listenTo($(this._volume),'input',this.updateVolume);\r\n      this.listenTo($(this._volumeButton),'click',this.toggleMute);\r\n      this.listenTo($(this._fullscreenButton),'click',this.toggleFullScreen);\r\n      this.listenTo($el,'fullscreenchange,webkitfullscreenchange',this.updateFullscreenButton);\r\n      this.listenTo($(this._pipButton),'click',this.togglePip);\r\n\r\n      if (!('pictureInPictureEnabled' in document)) {\r\n          this._pipButton.classList.add('hidden');\r\n      }\r\n      */\r\n    }\r\n  });\r\n\r\n  plugins.register(ControlsBar);\r\n\r\n  return players.ControlsBar = ControlsBar;\r\n});\r\n\r\n\ndefine('skylark-domx-plugins-players/playback-animation',[\r\n  \"skylark-langx\",\r\n  \"skylark-domx-styler\",\r\n  \"skylark-domx-noder\",\r\n  \"skylark-domx-eventer\",\r\n  \"skylark-domx-animates\",\r\n  \"skylark-domx-query\",\r\n  \"skylark-domx-plugins-base\"\r\n],function(langx,styler,noder, eventer,animates,$ , plugins) {\r\n\r\n  'use strict'\r\n\r\n  var PlaybackAnimation = plugins.Plugin.inherit({\r\n    klassName : \"PlaybackAnimation\",\r\n\r\n    pluginName : \"domx.players.playback_animation\",\r\n   \r\n    options : {\r\n      classes : {\r\n        play : \"play\",\r\n        pause : \"pause\"\r\n      },\r\n      selectors : {\r\n        playbackAnimation : null //'.playback-animation'\r\n\r\n      }\r\n    },\r\n\r\n\r\n    _construct: function(elm, options) {\r\n      //this.options = options\r\n      plugins.Plugin.prototype._construct.call(this,elm,options);\r\n\r\n      let $el = this.$(),\r\n          selectors = this.options.selectors,\r\n          $media = this._media = this.options.media;\r\n\r\n\r\n\r\n      if (selectors.playbackAnimation) {\r\n        this.$playbackAnimation = $el.find(selectors.playbackAnimation);\r\n      } else {\r\n        this.$playbackAnimation = $el;\r\n      }\r\n\r\n\r\n      this.listenTo($media,'click',this.animatePlayback);\r\n\r\n\r\n    },\r\n\r\n    // animatePlayback displays an animation when\r\n    // the video is played or paused\r\n    animatePlayback : function () {\r\n    // updatePlayButton updates the playback icon and tooltip\r\n    // depending on the playback state\r\n      if (this._media.paused()) {\r\n        this.$playbackAnimation.removeClass(this.options.classes.play).addClass(this.options.classes.pause);\r\n      } else {\r\n        this.$playbackAnimation.removeClass(this.options.classes.pause).addClass(this.options.classes.play);\r\n      }\r\n\r\n      this.$playbackAnimation.animate(\r\n        [\r\n          {\r\n            opacity: 1,\r\n            transform: 'scale(1)',\r\n          },\r\n          {\r\n            opacity: 0,\r\n            transform: 'scale(1.3)',\r\n          },\r\n        ],\r\n        {\r\n          duration: 500,\r\n        }\r\n      );\r\n    }\r\n\r\n\r\n  });\r\n\r\n  plugins.register(PlaybackAnimation);\r\n\r\n  return PlaybackAnimation;\r\n});\r\n\r\n\ndefine('skylark-domx-plugins-players/video-player',[\r\n  \"skylark-langx\",\r\n  \"skylark-domx-styler\",\r\n  \"skylark-domx-noder\",\r\n  \"skylark-domx-eventer\",\r\n  \"skylark-domx-medias\",\r\n  \"skylark-domx-query\",\r\n  \"skylark-domx-plugins-base\",\r\n  \"./players\",\r\n  \"./controls-bar\",\r\n  \"./playback-animation\",\r\n],function(langx,styler,noder, eventer,medias,$ , plugins,players,ControlsBar,PlaybackAnimation) {\r\n\r\n  'use strict'\r\n\r\n  var VideoPlayer = plugins.Plugin.inherit({\r\n    klassName : \"VideoPlayer\",\r\n\r\n    pluginName : \"domx.players.video\",\r\n   \r\n    options : {\r\n      selectors : {\r\n        video : 'video',\r\n        videoControls : '.video-controls',\r\n\r\n\r\n        playbackAnimation : '.playback-animation',\r\n\r\n      }\r\n    },\r\n\r\n\r\n    _construct: function(elm, options) {\r\n      //this.options = options\r\n      plugins.Plugin.prototype._construct.call(this,elm,options);\r\n\r\n      let $el = this.$(),\r\n          selectors = this.options.selectors;\r\n\r\n      this.$video = this.elmx().find(selectors.video);\r\n\r\n      this.$videoControls = $el.find(selectors.videoControls);\r\n\r\n      //this._playButton = $el.find(selectors.playButton)[0];\r\n      //this._playbackIcons = $el.find(selectors.playbackIcons);\r\n      this._controlsBar = ControlsBar.instantiate(this.$videoControls[0],{\r\n        media : this.$video,\r\n        container : this.elmx()\r\n      });\r\n\r\n\r\n\r\n      \r\n      //this._playbackAnimation = $el.find(selectors.playbackAnimation)[0];\r\n      this._playbackAnimation = PlaybackAnimation.instantiate($el.find(selectors.playbackAnimation)[0],{\r\n        media : this.$video        \r\n      });\r\n      \r\n\r\n\r\n      // Add eventlisteners here\r\n      this.listenTo($el,'mouseenter',this.showControls);\r\n      this.listenTo($el,'mouseleave',this.hideControls);\r\n      /*\r\n      this.listenTo(this.$video,'mouseenter',this.showControls);\r\n      this.listenTo(this.$video,'mouseleave',this.hideControls);\r\n      this.listenTo(this.$videoControls,'mouseenter',this.showControls);\r\n      this.listenTo(this.$videoControls,'mouseleave',this.hideControls);\r\n      this.listenTo($(this._playButton),'click', this.togglePlay);\r\n      this.listenTo($(this._video),'play',this.updatePlayButton);\r\n      this.listenTo($(this._video),'pause',this.updatePlayButton);\r\n      this.listenTo($(this._video),'loadedmetadata',this.initializeVideo);\r\n      this.listenTo($(this._video),'timeupdate',this.updateTimeElapsed);\r\n      this.listenTo($(this._video),'timeupdate',this.updateProgress);\r\n      this.listenTo($(this._video),'volumechange',this.updateVolumeIcon);\r\n      this.listenTo($(this._video),'click',this.togglePlay);\r\n      this.listenTo($(this._video),'click',this.animatePlayback);\r\n      this.listenTo($(this._seek),'mousemove',this.updateSeekTooltip);\r\n      this.listenTo($(this._seek),'input',this.skipAhead);\r\n      this.listenTo($(this._volume),'input',this.updateVolume);\r\n      this.listenTo($(this._volumeButton),'click',this.toggleMute);\r\n      this.listenTo($(this._fullscreenButton),'click',this.toggleFullScreen);\r\n      this.listenTo($el,'fullscreenchange,webkitfullscreenchange',this.updateFullscreenButton);\r\n      this.listenTo($(this._pipButton),'click',this.togglePip);\r\n\r\n      if (!('pictureInPictureEnabled' in document)) {\r\n          this._pipButton.classList.add('hidden');\r\n      }\r\n      */\r\n      this.listenTo($(document),'keyup',this.keyboardShortcuts);\r\n      \r\n      const videoWorks = !!document.createElement('video').canPlayType;\r\n      if (videoWorks) {\r\n        this.$video.controls(false);\r\n        this.$videoControls.show();\r\n      }\r\n\r\n      this.load();\r\n    },\r\n\r\n    source : function(media) {\r\n      this._media = media;\r\n      let title = media.title || \"\",\r\n          url = media.href,\r\n          type = media.type,\r\n          posterUrl = media.poster || \"\",\r\n          altText = media.altText || \"\";\r\n\r\n      let $el = this.$(),\r\n          video = this._video,\r\n          $play = this._$play,\r\n          $poster = this._$poster;\r\n\r\n      $el.prop(\"title\", title);\r\n      \r\n      if (video.canPlayType) {\r\n        if (url && type && video.canPlayType(type)) {\r\n          video.src = url\r\n        }    \r\n      }\r\n\r\n      video.poster = posterUrl\r\n      \r\n      $poster.prop({\r\n        \"src\" : posterUrl,\r\n        \"alt\" : altText\r\n      });\r\n\r\n      $play.prop({\r\n        'download' :  title,\r\n        \"href\" : url\r\n      });\r\n    \r\n    },\r\n\r\n    load : function() {\r\n      this.$video.load();\r\n    },\r\n\r\n    play : function() {\r\n      this.$video.play();\r\n\r\n    },\r\n\r\n    stop : function() {\r\n      this.$video.stop();\r\n    },\r\n\r\n    pause : function() {\r\n      this.$video.pause();      \r\n    },\r\n\r\n    // togglePlay toggles the playback state of the video.\r\n    // If the video playback is paused or ended, the video is played\r\n    // otherwise, the video is paused\r\n    togglePlay : function () {\r\n      if (this.$video.paused() || this.$video.ended()) {\r\n        this.$video.play();\r\n      } else {\r\n        this.$video.pause();\r\n      }\r\n    },\r\n\r\n\r\n    // hideControls hides the video controls when not in use\r\n    // if the video is paused, the controls must remain visible\r\n    hideControls : function () {\r\n      if (this.$video.paused()) {\r\n        return;\r\n      }\r\n\r\n      this.$videoControls.hide();\r\n    },\r\n\r\n    // showControls displays the video controls\r\n    showControls : function () {\r\n      this.$videoControls.show();\r\n    },\r\n\r\n    // keyboardShortcuts executes the relevant functions for\r\n    // each supported shortcut key\r\n    keyboardShortcuts : function (event) {\r\n      const { key } = event;\r\n      switch (key) {\r\n        case 'k':\r\n          this.togglePlay();\r\n          this._playbackAnimation.animatePlayback();\r\n          if (this.$video.paused()) {\r\n            this.showControls();\r\n          } else {\r\n            setTimeout(() => {\r\n              this.hideControls();\r\n            }, 2000);\r\n          }\r\n          break;\r\n        case 'm':\r\n          this._volumeControl.toggleMute();\r\n          break;\r\n        case 'f':\r\n          this._fullscreen.toggleFullScreen();\r\n          break;\r\n        case 'p':\r\n          this._pip.togglePip();\r\n          break;\r\n      }\r\n    }    \r\n\r\n\r\n  });\r\n\r\n  plugins.register(VideoPlayer);\r\n\r\n  return players.VideoPlayer = VideoPlayer;\r\n});\r\n\r\n\ndefine('skylark-domx-plugins-players/main',[\r\n    \"./players\",\r\n    \"./video-player\"\r\n], function(players) {\r\n    return players;\r\n})\r\n;\ndefine('skylark-domx-plugins-players', ['skylark-domx-plugins-players/main'], function (main) { return main; });\n\n"]}