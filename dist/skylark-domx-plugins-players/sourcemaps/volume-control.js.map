{"version":3,"sources":["volume-control.js"],"names":["define","langx","styler","noder","eventer","$","plugins","players","VolumeControl","Plugin","inherit","klassName","pluginName","options","selectors","volumeButton","volumeIcons","volumeMute","volumeLow","volumeHigh","volume","_construct","elm","prototype","call","this","_media","media","$el","$media","$volumeButton","find","$volumeIcons","$volumeMute","$volumeLow","$volumeHigh","$volume","listenTo","updateVolumeIcon","updateVolume","toggleMute","muted","val","forEach","icon","hide","data","show","register"],"mappings":";;;;;;;AAAAA,QACE,gBACA,sBACA,qBACA,uBACA,qBACA,4BACA,aACA,SAASC,EAAMC,EAAOC,EAAOC,EAAQC,EAAIC,EAAQC,GAEjD,aAEA,IAAIC,EAAgBF,EAAQG,OAAOC,SACjCC,UAAY,gBAEZC,WAAa,8BAEbC,SACEC,WACEC,aAAe,iBACfC,YAAc,qBACdC,WAAa,2BACbC,UAAY,0BACZC,WAAa,2BACbC,OAAS,YAKbC,WAAY,SAASC,EAAKT,GAExBP,EAAQG,OAAOc,UAAUF,WAAWG,KAAKC,KAAKH,EAAIT,GAElDY,KAAKC,OAASD,KAAKZ,QAAQc,MAE3B,IAAIC,EAAMH,KAAKpB,IACXS,EAAYW,KAAKZ,QAAQC,UACzBe,EAASJ,KAAKC,OAASD,KAAKZ,QAAQc,MAExCF,KAAKK,cAAgBF,EAAIG,KAAKjB,EAAUC,cACxCU,KAAKO,aAAeJ,EAAIG,KAAKjB,EAAUE,aACvCS,KAAKQ,YAAcL,EAAIG,KAAKjB,EAAUG,YACtCQ,KAAKS,WAAaN,EAAIG,KAAKjB,EAAUI,WACrCO,KAAKU,YAAcP,EAAIG,KAAKjB,EAAUK,YACtCM,KAAKW,QAAUR,EAAIG,KAAKjB,EAAUM,QAGlCK,KAAKY,SAASR,EAAO,eAAeJ,KAAKa,kBACzCb,KAAKY,SAASZ,KAAKW,QAAQ,QAAQX,KAAKc,cACxCd,KAAKY,SAASZ,KAAKK,cAAc,QAAQL,KAAKe,YAE9Cf,KAAKa,oBAMPC,aAAe,WACTd,KAAKC,OAAOe,SACdhB,KAAKC,OAAOe,OAAM,GAGpBhB,KAAKC,OAAON,OAAOK,KAAKW,QAAQM,QAKlCJ,iBAAmB,WACjBb,KAAKO,aAAaW,QAASC,IACzBvC,EAAEuC,GAAMC,SAGVpB,KAAKK,cAAcgB,KAAK,QAAS,YAE7BrB,KAAKC,OAAOe,SAAoC,IAAzBhB,KAAKC,OAAON,UACrCK,KAAKQ,YAAYc,OACjBtB,KAAKK,cAAcgB,KAAK,QAAS,eACxBrB,KAAKC,OAAON,SAAW,GAAKK,KAAKC,OAAON,UAAY,GAC7DK,KAAKS,WAAWa,OAEhBtB,KAAKU,YAAYY,QAOrBP,WAAa,WACXf,KAAKC,OAAOe,OAAOhB,KAAKC,OAAOe,SAE3BhB,KAAKC,OAAOe,SACdhB,KAAKW,QAAQU,KAAK,SAAUrB,KAAKW,QAAQM,OACzCjB,KAAKW,QAAQM,IAAI,IAEjBjB,KAAKW,QAAQM,IAAIjB,KAAKW,QAAQU,KAAK,cAOzC,OAFAxC,EAAQ0C,SAASxC,GAEVD,EAAQC,cAAgBA","file":"../volume-control.js","sourcesContent":["define([\r\n  \"skylark-langx\",\r\n  \"skylark-domx-styler\",\r\n  \"skylark-domx-noder\",\r\n  \"skylark-domx-eventer\",\r\n  \"skylark-domx-query\",\r\n  \"skylark-domx-plugins-base\",\r\n  \"./players\"\r\n],function(langx,styler,noder, eventer,$ , plugins,players) {\r\n\r\n  'use strict'\r\n\r\n  var VolumeControl = plugins.Plugin.inherit({\r\n    klassName : \"VolumeControl\",\r\n\r\n    pluginName : \"domx.players.volume_control\",\r\n   \r\n    options : {\r\n      selectors : {\r\n        volumeButton : '.volume-button',\r\n        volumeIcons : '.volume-button use',\r\n        volumeMute : 'use[href=\"#volume-mute\"]',\r\n        volumeLow : 'use[href=\"#volume-low\"]',\r\n        volumeHigh : 'use[href=\"#volume-high\"]',\r\n        volume : '.volume'\r\n      }\r\n    },\r\n\r\n\r\n    _construct: function(elm, options) {\r\n      //this.options = options\r\n      plugins.Plugin.prototype._construct.call(this,elm,options);\r\n\r\n      this._media = this.options.media;\r\n\r\n      let $el = this.$(),\r\n          selectors = this.options.selectors,\r\n          $media = this._media = this.options.media;\r\n\r\n      this.$volumeButton = $el.find(selectors.volumeButton);\r\n      this.$volumeIcons = $el.find(selectors.volumeIcons);\r\n      this.$volumeMute = $el.find(selectors.volumeMute);\r\n      this.$volumeLow = $el.find(selectors.volumeLow);\r\n      this.$volumeHigh = $el.find(selectors.volumeHigh);\r\n      this.$volume = $el.find(selectors.volume);\r\n\r\n      // Add eventlisteners here\r\n      this.listenTo($media,'volumechange',this.updateVolumeIcon);\r\n      this.listenTo(this.$volume,'input',this.updateVolume);\r\n      this.listenTo(this.$volumeButton,'click',this.toggleMute);\r\n\r\n      this.updateVolumeIcon();\r\n    },\r\n\r\n\r\n    // updateVolume updates the video's volume\r\n    // and disables the muted state if active\r\n    updateVolume : function () {\r\n      if (this._media.muted()) {\r\n        this._media.muted(false);\r\n      }\r\n\r\n      this._media.volume(this.$volume.val());\r\n    },\r\n\r\n    // updateVolumeIcon updates the volume icon so that it correctly reflects\r\n    // the volume of the video\r\n    updateVolumeIcon : function () {\r\n      this.$volumeIcons.forEach((icon) => {\r\n        $(icon).hide();\r\n      });\r\n\r\n      this.$volumeButton.data('title', 'Mute (m)');\r\n\r\n      if (this._media.muted() || this._media.volume() === 0) {\r\n        this.$volumeMute.show();\r\n        this.$volumeButton.data('title', 'Unmute (m)');\r\n      } else if (this._media.volume() > 0 && this._media.volume() <= 0.5) {\r\n        this.$volumeLow.show();\r\n      } else {\r\n        this.$volumeHigh.show();\r\n      }\r\n    },\r\n\r\n    // toggleMute mutes or unmutes the video when executed\r\n    // When the video is unmuted, the volume is returned to the value\r\n    // it was set to before the video was muted\r\n    toggleMute : function () {\r\n      this._media.muted(!this._media.muted());\r\n\r\n      if (this._media.muted()) {\r\n        this.$volume.data('volume', this.$volume.val());\r\n        this.$volume.val(0);\r\n      } else {\r\n        this.$volume.val(this.$volume.data(\"volume\"));\r\n      }\r\n    }\r\n  });\r\n\r\n  plugins.register(VolumeControl);\r\n\r\n  return players.VolumeControl = VolumeControl;\r\n});\r\n\r\n"]}