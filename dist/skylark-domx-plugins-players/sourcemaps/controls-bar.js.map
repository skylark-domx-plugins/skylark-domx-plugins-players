{"version":3,"sources":["controls-bar.js"],"names":["define","langx","styler","noder","eventer","medias","$","plugins","Fullscreen","Pip","players","PlayControl","ProgressControl","TimeControl","VolumeControl","ControlsBar","Plugin","inherit","klassName","pluginName","options","selectors","playButton","playbackIcons","timeControl","timeElapsed","duration","progressControl","progressBar","seek","seekTooltip","volumeControl","volumeButton","volumeIcons","volumeMute","volumeLow","volumeHigh","volume","fullscreenButton","fullscreenIcons","pipButton","_construct","elm","prototype","call","this","$el","media","container","_playControl","instantiate","find","_timeControl","_progressControl","_volumeControl","_fullscreen","target","_pip","register"],"mappings":";;;;;;;AAAAA,QACE,gBACA,sBACA,qBACA,uBACA,sBACA,qBACA,4BACA,0CACA,mCACA,YACA,iBACA,qBACA,iBACA,oBACA,SAASC,EAAMC,EAAOC,EAAOC,EAAQC,EAAOC,EAAIC,EAAQC,EAAWC,EAAIC,EAAQC,EAAYC,EAAgBC,EAAYC,GAEvH,aAEA,IAAIC,EAAcR,EAAQS,OAAOC,SAC/BC,UAAY,cAEZC,WAAa,4BAEbC,SACEC,WAEEC,WAAa,eACbC,cAAgB,sBAEhBC,YAAc,QACdC,YAAc,gBACdC,SAAW,YAEXC,gBAAkB,kBAClBC,YAAc,gBACdC,KAAO,QACPC,YAAc,gBAEdC,cAAgB,kBAChBC,aAAe,iBACfC,YAAc,qBACdC,WAAa,2BACbC,UAAY,0BACZC,WAAa,2BACbC,OAAS,UAETC,iBAAmB,qBACnBC,gBAAkB,yBAElBC,UAAY,gBAMhBC,WAAY,SAASC,EAAKtB,GAExBb,EAAQS,OAAO2B,UAAUF,WAAWG,KAAKC,KAAKH,EAAItB,GAElD,IAAI0B,EAAMD,KAAKvC,IACXe,EAAYwB,KAAKzB,QAAQC,UACzB0B,EAAQF,KAAKzB,QAAQ2B,MACrBC,EAAYH,KAAKzB,QAAQ4B,UAK7BH,KAAKI,aAAetC,EAAYuC,YAAYJ,EAAIK,KAAK9B,EAAUC,YAAY,IACzEyB,MAAAA,IAMFF,KAAKO,aAAevC,EAAYqC,YAAYJ,EAAIK,KAAK9B,EAAUG,aAAa,IAC1EuB,MAAAA,IAMFF,KAAKQ,iBAAmBzC,EAAgBsC,YAAYJ,EAAIK,KAAK9B,EAAUM,iBAAiB,IACtFoB,MAAAA,IASFF,KAAKS,eAAiBxC,EAAcoC,YAAYJ,EAAIK,KAAK9B,EAAUU,eAAe,IAChFgB,MAAAA,IAMFF,KAAKU,YAAc/C,EAAW0C,YAAYJ,EAAIK,KAAK9B,EAAUiB,kBAAkB,IAC7EkB,OAASR,IAIXH,KAAKY,KAAOhD,EAAIyC,YAAYJ,EAAIK,KAAK9B,EAAUmB,WAAW,IACxDgB,OAAST,OAiCf,OAFAxC,EAAQmD,SAAS3C,GAEVL,EAAQK,YAAcA","file":"../controls-bar.js","sourcesContent":["define([\r\n  \"skylark-langx\",\r\n  \"skylark-domx-styler\",\r\n  \"skylark-domx-noder\",\r\n  \"skylark-domx-eventer\",\r\n  \"skylark-domx-medias\",\r\n  \"skylark-domx-query\",\r\n  \"skylark-domx-plugins-base\",\r\n  \"skylark-domx-plugins-toggles/fullscreen\",\r\n  \"skylark-domx-plugins-toggles/Pip\",\r\n  \"./players\",\r\n  \"./play-control\",\r\n  \"./progress-control\",\r\n  \"./time-control\",\r\n  \"./volume-control\"\r\n],function(langx,styler,noder, eventer,medias,$ , plugins,Fullscreen,Pip,players,PlayControl,ProgressControl,TimeControl,VolumeControl) {\r\n\r\n  'use strict'\r\n\r\n  var ControlsBar = plugins.Plugin.inherit({\r\n    klassName : \"ControlsBar\",\r\n\r\n    pluginName : \"domx.players.controls_bar\",\r\n   \r\n    options : {\r\n      selectors : {\r\n\r\n        playButton : '.play-button',\r\n        playbackIcons : '.playback-icons use',\r\n\r\n        timeControl : \".time\",\r\n        timeElapsed : '.time-elapsed',\r\n        duration : '.duration',\r\n\r\n        progressControl : \".video-progress\",\r\n        progressBar : '.progress-bar',\r\n        seek : '.seek',\r\n        seekTooltip : '.seek-tooltip',\r\n\r\n        volumeControl : \".volume-control\",\r\n        volumeButton : '.volume-button',\r\n        volumeIcons : '.volume-button use',\r\n        volumeMute : 'use[href=\"#volume-mute\"]',\r\n        volumeLow : 'use[href=\"#volume-low\"]',\r\n        volumeHigh : 'use[href=\"#volume-high\"]',\r\n        volume : '.volume',\r\n\r\n        fullscreenButton : '.fullscreen-button',\r\n        fullscreenIcons : '.fullscreen-button use',\r\n\r\n        pipButton : '.pip-button'\r\n\r\n      }\r\n    },\r\n\r\n\r\n    _construct: function(elm, options) {\r\n      //this.options = options\r\n      plugins.Plugin.prototype._construct.call(this,elm,options);\r\n\r\n      let $el = this.$(),\r\n          selectors = this.options.selectors,\r\n          media = this.options.media,\r\n          container = this.options.container;\r\n\r\n\r\n      //this._playButton = $el.find(selectors.playButton)[0];\r\n      //this._playbackIcons = $el.find(selectors.playbackIcons);\r\n      this._playControl = PlayControl.instantiate($el.find(selectors.playButton)[0],{\r\n        media\r\n      });\r\n\r\n\r\n      //this._timeElapsed = $el.find(selectors.timeElapsed)[0];\r\n      //this._duration = $el.find(selectors.duration)[0];\r\n      this._timeControl = TimeControl.instantiate($el.find(selectors.timeControl)[0],{\r\n        media        \r\n      });\r\n      \r\n      //this._progressBar = $el.find(selectors.progressBar)[0];\r\n      //this._seek = $el.find(selectors.seek)[0];\r\n      //this._seekTooltip = $el.find(selectors.seekTooltip)[0];\r\n      this._progressControl = ProgressControl.instantiate($el.find(selectors.progressControl)[0],{\r\n        media      \r\n      });\r\n\r\n      //this._volumeButton = $el.find(selectors.volumeButton)[0];\r\n      //this._volumeIcons = $el.find(selectors.volumeIcons);\r\n      //this._volumeMute = $el.find(selectors.volumeMute)[0];\r\n      //this._volumeLow = $el.find(selectors.volumeLow)[0];\r\n      //this._volumeHigh = $el.find(selectors.volumeHigh)[0];\r\n      //this._volume = $el.find(selectors.volume)[0];\r\n      this._volumeControl = VolumeControl.instantiate($el.find(selectors.volumeControl)[0],{\r\n        media    \r\n      });\r\n      \r\n\r\n      //this._fullscreenButton = $el.find(selectors.fullscreenButton)[0];\r\n      //this._fullscreenIcons = $el.find(selectors.fullscreenIcons);\r\n      this._fullscreen = Fullscreen.instantiate($el.find(selectors.fullscreenButton)[0],{\r\n        target : container\r\n      });\r\n      \r\n      //this._pipButton = $el.find(selectors.pipButton)[0];\r\n      this._pip = Pip.instantiate($el.find(selectors.pipButton)[0],{\r\n        target : media       \r\n      });\r\n\r\n      // Add eventlisteners here\r\n      /*\r\n      this.listenTo($(this._playButton),'click', this.togglePlay);\r\n      this.listenTo($(this._video),'play',this.updatePlayButton);\r\n      this.listenTo($(this._video),'pause',this.updatePlayButton);\r\n      this.listenTo($(this._video),'loadedmetadata',this.initializeVideo);\r\n      this.listenTo($(this._video),'timeupdate',this.updateTimeElapsed);\r\n      this.listenTo($(this._video),'timeupdate',this.updateProgress);\r\n      this.listenTo($(this._video),'volumechange',this.updateVolumeIcon);\r\n      this.listenTo($(this._video),'click',this.togglePlay);\r\n      this.listenTo($(this._video),'click',this.animatePlayback);\r\n      this.listenTo($(this._video),'mouseenter',this.showControls);\r\n      this.listenTo($(this._video),'mouseleave',this.hideControls);\r\n      this.listenTo($(this._seek),'mousemove',this.updateSeekTooltip);\r\n      this.listenTo($(this._seek),'input',this.skipAhead);\r\n      this.listenTo($(this._volume),'input',this.updateVolume);\r\n      this.listenTo($(this._volumeButton),'click',this.toggleMute);\r\n      this.listenTo($(this._fullscreenButton),'click',this.toggleFullScreen);\r\n      this.listenTo($el,'fullscreenchange,webkitfullscreenchange',this.updateFullscreenButton);\r\n      this.listenTo($(this._pipButton),'click',this.togglePip);\r\n\r\n      if (!('pictureInPictureEnabled' in document)) {\r\n          this._pipButton.classList.add('hidden');\r\n      }\r\n      */\r\n    }\r\n  });\r\n\r\n  plugins.register(ControlsBar);\r\n\r\n  return players.ControlsBar = ControlsBar;\r\n});\r\n\r\n"]}