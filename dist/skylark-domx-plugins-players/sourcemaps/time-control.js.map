{"version":3,"sources":["time-control.js"],"names":["define","langx","styler","noder","eventer","$","plugins","TimeControl","Plugin","inherit","klassName","pluginName","options","selectors","timeElapsed","duration","_construct","elm","prototype","call","this","$el","$media","_media","media","$timeElapsed","find","$duration","listenTo","updateTimeElapsed","updateDuration","formatTime","timeInSeconds","result","Date","toISOString","substr","minutes","seconds","Math","round","time","text","attr","currentTime","register"],"mappings":";;;;;;;AAAAA,QACE,gBACA,sBACA,qBACA,uBACA,qBACA,6BACA,SAASC,EAAMC,EAAOC,EAAOC,EAAQC,EAAIC,GAEzC,aAEA,IAAIC,EAAcD,EAAQE,OAAOC,SAC/BC,UAAY,cAEZC,WAAa,4BAEbC,SACEC,WACEC,YAAc,gBACdC,SAAW,cAKfC,WAAY,SAASC,EAAKL,GAExBN,EAAQE,OAAOU,UAAUF,WAAWG,KAAKC,KAAKH,EAAIL,GAElD,IAAIS,EAAMD,KAAKf,IACXQ,EAAYO,KAAKR,QAAQC,UACzBS,EAASF,KAAKG,OAASH,KAAKR,QAAQY,MAGxCJ,KAAKK,aAAeJ,EAAIK,KAAKb,EAAUC,aACvCM,KAAKO,UAAYN,EAAIK,KAAKb,EAAUE,UAGpCK,KAAKQ,SAASN,EAAO,aAAaF,KAAKS,mBACvCT,KAAKQ,SAASN,EAAO,iBAAiBF,KAAKU,iBAO7CC,WAAa,SAAUC,GACrB,MAAMC,EAAS,IAAIC,KAAqB,IAAhBF,GAAsBG,cAAcC,OAAO,GAAI,GAEvE,OACEC,QAASJ,EAAOG,OAAO,EAAG,GAC1BE,QAASL,EAAOG,OAAO,EAAG,KAM9BN,eAAiB,WACf,IAAIN,EAAQJ,KAAKG,OACjB,MAAMR,EAAWwB,KAAKC,MAAMhB,EAAMT,YAC7B0B,EAAOrB,KAAKW,WAAWhB,GAC5BK,KAAKO,UAAUe,QAAQD,EAAKJ,WAAWI,EAAKH,WAC5ClB,KAAKO,UAAUgB,KAAK,cAAeF,EAAKJ,YAAYI,EAAKH,aAK3DT,kBAAoB,WAClB,MAAMY,EAAOrB,KAAKW,WAAWQ,KAAKC,MAAMpB,KAAKG,OAAOqB,gBACpDxB,KAAKK,aAAaiB,QAAQD,EAAKJ,WAAWI,EAAKH,WAC/ClB,KAAKK,aAAakB,KAAK,cAAeF,EAAKJ,YAAYI,EAAKH,eAMhE,OAFAhC,EAAQuC,SAAStC,GAEVA","file":"../time-control.js","sourcesContent":["define([\r\n  \"skylark-langx\",\r\n  \"skylark-domx-styler\",\r\n  \"skylark-domx-noder\",\r\n  \"skylark-domx-eventer\",\r\n  \"skylark-domx-query\",\r\n  \"skylark-domx-plugins-base\"\r\n],function(langx,styler,noder, eventer,$ , plugins) {\r\n\r\n  'use strict'\r\n\r\n  var TimeControl = plugins.Plugin.inherit({\r\n    klassName : \"TimeControl\",\r\n\r\n    pluginName : \"domx.players.time_control\",\r\n   \r\n    options : {\r\n      selectors : {\r\n        timeElapsed : '.time-elapsed',\r\n        duration : '.duration'\r\n      }\r\n    },\r\n\r\n\r\n    _construct: function(elm, options) {\r\n      //this.options = options\r\n      plugins.Plugin.prototype._construct.call(this,elm,options);\r\n\r\n      let $el = this.$(),\r\n          selectors = this.options.selectors,\r\n          $media = this._media = this.options.media;\r\n\r\n\r\n      this.$timeElapsed = $el.find(selectors.timeElapsed);\r\n      this.$duration = $el.find(selectors.duration);\r\n\r\n      // Add eventlisteners here\r\n      this.listenTo($media,'timeupdate',this.updateTimeElapsed);\r\n      this.listenTo($media,'loadedmetadata',this.updateDuration);\r\n\r\n    },\r\n\r\n\r\n    // formatTime takes a time length in seconds and returns the time in\r\n    // minutes and seconds\r\n    formatTime : function (timeInSeconds) {\r\n      const result = new Date(timeInSeconds * 1000).toISOString().substr(11, 8);\r\n\r\n      return {\r\n        minutes: result.substr(3, 2),\r\n        seconds: result.substr(6, 2),\r\n      };\r\n    },\r\n\r\n    // initializeVideo sets the video duration, and maximum value of the\r\n    // progressBar\r\n    updateDuration : function () {\r\n      var media = this._media;\r\n      const duration = Math.round(media.duration()),\r\n           time = this.formatTime(duration);\r\n      this.$duration.text(`${time.minutes}:${time.seconds}`);\r\n      this.$duration.attr('datetime', `${time.minutes}m ${time.seconds}s`);\r\n    },\r\n\r\n    // updateTimeElapsed indicates how far through the video\r\n    // the current playback is by updating the timeElapsed element\r\n    updateTimeElapsed : function () {\r\n      const time = this.formatTime(Math.round(this._media.currentTime()));\r\n      this.$timeElapsed.text(`${time.minutes}:${time.seconds}`);\r\n      this.$timeElapsed.attr('datetime', `${time.minutes}m ${time.seconds}s`);\r\n    }\r\n  });\r\n\r\n  plugins.register(TimeControl);\r\n\r\n  return TimeControl;\r\n});\r\n\r\n"]}