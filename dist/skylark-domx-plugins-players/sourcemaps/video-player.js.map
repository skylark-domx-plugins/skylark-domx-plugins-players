{"version":3,"sources":["video-player.js"],"names":["define","langx","styler","noder","eventer","medias","$","plugins","players","ControlsBar","PlaybackAnimation","VideoPlayer","Plugin","inherit","klassName","pluginName","options","selectors","video","videoControls","playbackAnimation","_construct","elm","prototype","call","this","$el","$video","elmx","find","$videoControls","_controlsBar","instantiate","media","container","_playbackAnimation","listenTo","showControls","hideControls","document","keyboardShortcuts","createElement","canPlayType","controls","show","load","source","_media","title","url","href","type","posterUrl","poster","altText","_video","$play","_$play","$poster","_$poster","prop","src","alt","download","play","stop","pause","togglePlay","paused","ended","hide","event","key","animatePlayback","setTimeout","_volumeControl","toggleMute","_fullscreen","toggleFullScreen","_pip","togglePip","register"],"mappings":";;;;;;;AAAAA,QACE,gBACA,sBACA,qBACA,uBACA,sBACA,qBACA,4BACA,YACA,iBACA,wBACA,SAASC,EAAMC,EAAOC,EAAOC,EAAQC,EAAOC,EAAIC,EAAQC,EAAQC,EAAYC,GAE5E,aAEA,IAAIC,EAAcJ,EAAQK,OAAOC,SAC/BC,UAAY,cAEZC,WAAa,qBAEbC,SACEC,WACEC,MAAQ,QACRC,cAAgB,gBAEhBC,kBAAoB,wBAMxBC,WAAY,SAASC,EAAKN,GAExBT,EAAQK,OAAOW,UAAUF,WAAWG,KAAKC,KAAKH,EAAIN,GAElD,IAAIU,EAAMD,KAAKnB,IACXW,EAAYQ,KAAKT,QAAQC,UAE7BQ,KAAKE,OAASF,KAAKG,OAAOC,KAAKZ,EAAUC,OAEzCO,KAAKK,eAAiBJ,EAAIG,KAAKZ,EAAUE,eAIzCM,KAAKM,aAAetB,EAAYuB,YAAYP,KAAKK,eAAe,IAC9DG,MAAQR,KAAKE,OACbO,UAAYT,KAAKG,SAOnBH,KAAKU,mBAAqBzB,EAAkBsB,YAAYN,EAAIG,KAAKZ,EAAUG,mBAAmB,IAC5Fa,MAAQR,KAAKE,SAMfF,KAAKW,SAASV,EAAI,aAAaD,KAAKY,cACpCZ,KAAKW,SAASV,EAAI,aAAaD,KAAKa,cA2BpCb,KAAKW,SAAS9B,EAAEiC,UAAU,QAAQd,KAAKe,qBAElBD,SAASE,cAAc,SAASC,cAEnDjB,KAAKE,OAAOgB,UAAS,GACrBlB,KAAKK,eAAec,QAGtBnB,KAAKoB,QAGPC,OAAS,SAASb,GAChBR,KAAKsB,OAASd,EACd,IAAIe,EAAQf,EAAMe,OAAS,GACvBC,EAAMhB,EAAMiB,KACZC,EAAOlB,EAAMkB,KACbC,EAAYnB,EAAMoB,QAAU,GAC5BC,EAAUrB,EAAMqB,SAAW,GAE3B5B,EAAMD,KAAKnB,IACXY,EAAQO,KAAK8B,OACbC,EAAQ/B,KAAKgC,OACbC,EAAUjC,KAAKkC,SAEnBjC,EAAIkC,KAAK,QAASZ,GAEd9B,EAAMwB,aACJO,GAAOE,GAAQjC,EAAMwB,YAAYS,KACnCjC,EAAM2C,IAAMZ,GAIhB/B,EAAMmC,OAASD,EAEfM,EAAQE,MACNC,IAAQT,EACRU,IAAQR,IAGVE,EAAMI,MACJG,SAAcf,EACdE,KAASD,KAKbJ,KAAO,WACLpB,KAAKE,OAAOkB,QAGdmB,KAAO,WACLvC,KAAKE,OAAOqC,QAIdC,KAAO,WACLxC,KAAKE,OAAOsC,QAGdC,MAAQ,WACNzC,KAAKE,OAAOuC,SAMdC,WAAa,WACP1C,KAAKE,OAAOyC,UAAY3C,KAAKE,OAAO0C,QACtC5C,KAAKE,OAAOqC,OAEZvC,KAAKE,OAAOuC,SAOhB5B,aAAe,WACTb,KAAKE,OAAOyC,UAIhB3C,KAAKK,eAAewC,QAItBjC,aAAe,WACbZ,KAAKK,eAAec,QAKtBJ,kBAAoB,SAAU+B,GAC5B,MAAMC,IAAEA,GAAQD,EAChB,OAAQC,GACN,IAAK,IACH/C,KAAK0C,aACL1C,KAAKU,mBAAmBsC,kBACpBhD,KAAKE,OAAOyC,SACd3C,KAAKY,eAELqC,WAAW,KACTjD,KAAKa,gBACJ,KAEL,MACF,IAAK,IACHb,KAAKkD,eAAeC,aACpB,MACF,IAAK,IACHnD,KAAKoD,YAAYC,mBACjB,MACF,IAAK,IACHrD,KAAKsD,KAAKC,gBAUlB,OAFAzE,EAAQ0E,SAAStE,GAEVH,EAAQG,YAAcA","file":"../video-player.js","sourcesContent":["define([\r\n  \"skylark-langx\",\r\n  \"skylark-domx-styler\",\r\n  \"skylark-domx-noder\",\r\n  \"skylark-domx-eventer\",\r\n  \"skylark-domx-medias\",\r\n  \"skylark-domx-query\",\r\n  \"skylark-domx-plugins-base\",\r\n  \"./players\",\r\n  \"./controls-bar\",\r\n  \"./playback-animation\",\r\n],function(langx,styler,noder, eventer,medias,$ , plugins,players,ControlsBar,PlaybackAnimation) {\r\n\r\n  'use strict'\r\n\r\n  var VideoPlayer = plugins.Plugin.inherit({\r\n    klassName : \"VideoPlayer\",\r\n\r\n    pluginName : \"domx.players.video\",\r\n   \r\n    options : {\r\n      selectors : {\r\n        video : 'video',\r\n        videoControls : '.controls-bar',\r\n\r\n        playbackAnimation : '.playback-animation',\r\n\r\n      }\r\n    },\r\n\r\n\r\n    _construct: function(elm, options) {\r\n      //this.options = options\r\n      plugins.Plugin.prototype._construct.call(this,elm,options);\r\n\r\n      let $el = this.$(),\r\n          selectors = this.options.selectors;\r\n\r\n      this.$video = this.elmx().find(selectors.video);\r\n\r\n      this.$videoControls = $el.find(selectors.videoControls);\r\n\r\n      //this._playButton = $el.find(selectors.playButton)[0];\r\n      //this._playbackIcons = $el.find(selectors.playbackIcons);\r\n      this._controlsBar = ControlsBar.instantiate(this.$videoControls[0],{\r\n        media : this.$video,\r\n        container : this.elmx()\r\n      });\r\n\r\n\r\n\r\n      \r\n      //this._playbackAnimation = $el.find(selectors.playbackAnimation)[0];\r\n      this._playbackAnimation = PlaybackAnimation.instantiate($el.find(selectors.playbackAnimation)[0],{\r\n        media : this.$video        \r\n      });\r\n      \r\n\r\n\r\n      // Add eventlisteners here\r\n      this.listenTo($el,'mouseenter',this.showControls);\r\n      this.listenTo($el,'mouseleave',this.hideControls);\r\n      /*\r\n      this.listenTo(this.$video,'mouseenter',this.showControls);\r\n      this.listenTo(this.$video,'mouseleave',this.hideControls);\r\n      this.listenTo(this.$videoControls,'mouseenter',this.showControls);\r\n      this.listenTo(this.$videoControls,'mouseleave',this.hideControls);\r\n      this.listenTo($(this._playButton),'click', this.togglePlay);\r\n      this.listenTo($(this._video),'play',this.updatePlayButton);\r\n      this.listenTo($(this._video),'pause',this.updatePlayButton);\r\n      this.listenTo($(this._video),'loadedmetadata',this.initializeVideo);\r\n      this.listenTo($(this._video),'timeupdate',this.updateTimeElapsed);\r\n      this.listenTo($(this._video),'timeupdate',this.updateProgress);\r\n      this.listenTo($(this._video),'volumechange',this.updateVolumeIcon);\r\n      this.listenTo($(this._video),'click',this.togglePlay);\r\n      this.listenTo($(this._video),'click',this.animatePlayback);\r\n      this.listenTo($(this._seek),'mousemove',this.updateSeekTooltip);\r\n      this.listenTo($(this._seek),'input',this.skipAhead);\r\n      this.listenTo($(this._volume),'input',this.updateVolume);\r\n      this.listenTo($(this._volumeButton),'click',this.toggleMute);\r\n      this.listenTo($(this._fullscreenButton),'click',this.toggleFullScreen);\r\n      this.listenTo($el,'fullscreenchange,webkitfullscreenchange',this.updateFullscreenButton);\r\n      this.listenTo($(this._pipButton),'click',this.togglePip);\r\n\r\n      if (!('pictureInPictureEnabled' in document)) {\r\n          this._pipButton.classList.add('hidden');\r\n      }\r\n      */\r\n      this.listenTo($(document),'keyup',this.keyboardShortcuts);\r\n      \r\n      const videoWorks = !!document.createElement('video').canPlayType;\r\n      if (videoWorks) {\r\n        this.$video.controls(false);\r\n        this.$videoControls.show();\r\n      }\r\n\r\n      this.load();\r\n    },\r\n\r\n    source : function(media) {\r\n      this._media = media;\r\n      let title = media.title || \"\",\r\n          url = media.href,\r\n          type = media.type,\r\n          posterUrl = media.poster || \"\",\r\n          altText = media.altText || \"\";\r\n\r\n      let $el = this.$(),\r\n          video = this._video,\r\n          $play = this._$play,\r\n          $poster = this._$poster;\r\n\r\n      $el.prop(\"title\", title);\r\n      \r\n      if (video.canPlayType) {\r\n        if (url && type && video.canPlayType(type)) {\r\n          video.src = url\r\n        }    \r\n      }\r\n\r\n      video.poster = posterUrl\r\n      \r\n      $poster.prop({\r\n        \"src\" : posterUrl,\r\n        \"alt\" : altText\r\n      });\r\n\r\n      $play.prop({\r\n        'download' :  title,\r\n        \"href\" : url\r\n      });\r\n    \r\n    },\r\n\r\n    load : function() {\r\n      this.$video.load();\r\n    },\r\n\r\n    play : function() {\r\n      this.$video.play();\r\n\r\n    },\r\n\r\n    stop : function() {\r\n      this.$video.stop();\r\n    },\r\n\r\n    pause : function() {\r\n      this.$video.pause();      \r\n    },\r\n\r\n    // togglePlay toggles the playback state of the video.\r\n    // If the video playback is paused or ended, the video is played\r\n    // otherwise, the video is paused\r\n    togglePlay : function () {\r\n      if (this.$video.paused() || this.$video.ended()) {\r\n        this.$video.play();\r\n      } else {\r\n        this.$video.pause();\r\n      }\r\n    },\r\n\r\n\r\n    // hideControls hides the video controls when not in use\r\n    // if the video is paused, the controls must remain visible\r\n    hideControls : function () {\r\n      if (this.$video.paused()) {\r\n        return;\r\n      }\r\n\r\n      this.$videoControls.hide();\r\n    },\r\n\r\n    // showControls displays the video controls\r\n    showControls : function () {\r\n      this.$videoControls.show();\r\n    },\r\n\r\n    // keyboardShortcuts executes the relevant functions for\r\n    // each supported shortcut key\r\n    keyboardShortcuts : function (event) {\r\n      const { key } = event;\r\n      switch (key) {\r\n        case 'k':\r\n          this.togglePlay();\r\n          this._playbackAnimation.animatePlayback();\r\n          if (this.$video.paused()) {\r\n            this.showControls();\r\n          } else {\r\n            setTimeout(() => {\r\n              this.hideControls();\r\n            }, 2000);\r\n          }\r\n          break;\r\n        case 'm':\r\n          this._volumeControl.toggleMute();\r\n          break;\r\n        case 'f':\r\n          this._fullscreen.toggleFullScreen();\r\n          break;\r\n        case 'p':\r\n          this._pip.togglePip();\r\n          break;\r\n      }\r\n    }    \r\n\r\n\r\n  });\r\n\r\n  plugins.register(VideoPlayer);\r\n\r\n  return players.VideoPlayer = VideoPlayer;\r\n});\r\n\r\n"]}