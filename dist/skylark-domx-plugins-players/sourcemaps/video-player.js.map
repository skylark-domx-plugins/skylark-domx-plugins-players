{"version":3,"sources":["video-player.js"],"names":["define","langx","styler","noder","eventer","medias","$","plugins","Fullscreen","Pip","players","PlayControl","PlaybackAnimation","ProgressControl","TimeControl","VolumeControl","VideoPlayer","Plugin","inherit","klassName","pluginName","options","selectors","video","videoControls","playButton","playbackIcons","timeControl","timeElapsed","duration","progressControl","progressBar","seek","seekTooltip","volumeControl","volumeButton","volumeIcons","volumeMute","volumeLow","volumeHigh","volume","playbackAnimation","fullscreenButton","fullscreenIcons","pipButton","_construct","elm","prototype","call","this","$el","$video","elmx","find","$videoControls","_playControl","instantiate","media","_timeControl","_progressControl","_volumeControl","_playbackAnimation","_fullscreen","target","_pip","listenTo","_videoControls","showControls","hideControls","document","keyboardShortcuts","createElement","canPlayType","controls","show","load","source","_media","title","url","href","type","posterUrl","poster","altText","_video","$play","_$play","$poster","_$poster","prop","src","alt","download","play","stop","pause","togglePlay","paused","ended","addClass","removeClass","event","key","animatePlayback","setTimeout","toggleMute","toggleFullScreen","togglePip","register"],"mappings":"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","file":"../video-player.js","sourcesContent":["define([\r\n  \"skylark-langx\",\r\n  \"skylark-domx-styler\",\r\n  \"skylark-domx-noder\",\r\n  \"skylark-domx-eventer\",\r\n  \"skylark-domx-medias\",\r\n  \"skylark-domx-query\",\r\n  \"skylark-domx-plugins-base\",\r\n  \"skylark-domx-plugins-toggles/fullscreen\",\r\n  \"skylark-domx-plugins-toggles/Pip\",\r\n  \"./players\",\r\n  \"./play-control\",\r\n  \"./playback-animation\",\r\n  \"./progress-control\",\r\n  \"./time-control\",\r\n  \"./volume-control\"\r\n],function(langx,styler,noder, eventer,medias,$ , plugins,Fullscreen,Pip,players,PlayControl,PlaybackAnimation,ProgressControl,TimeControl,VolumeControl) {\r\n\r\n  'use strict'\r\n\r\n  var VideoPlayer = plugins.Plugin.inherit({\r\n    klassName : \"VideoPlayer\",\r\n\r\n    pluginName : \"domx.players.video\",\r\n   \r\n    options : {\r\n      selectors : {\r\n        video : 'video',\r\n        videoControls : '.video-controls',\r\n\r\n        playButton : '.play-button',\r\n        playbackIcons : '.playback-icons use',\r\n\r\n        timeControl : \".time\",\r\n        timeElapsed : '.time-elapsed',\r\n        duration : '.duration',\r\n\r\n        progressControl : \".video-progress\",\r\n        progressBar : '.progress-bar',\r\n        seek : '.seek',\r\n        seekTooltip : '.seek-tooltip',\r\n\r\n        volumeControl : \".volume-control\",\r\n        volumeButton : '.volume-button',\r\n        volumeIcons : '.volume-button use',\r\n        volumeMute : 'use[href=\"#volume-mute\"]',\r\n        volumeLow : 'use[href=\"#volume-low\"]',\r\n        volumeHigh : 'use[href=\"#volume-high\"]',\r\n        volume : '.volume',\r\n\r\n        playbackAnimation : '.playback-animation',\r\n\r\n        fullscreenButton : '.fullscreen-button',\r\n        fullscreenIcons : '.fullscreen-button use',\r\n\r\n        pipButton : '.pip-button'\r\n\r\n      }\r\n    },\r\n\r\n\r\n    _construct: function(elm, options) {\r\n      //this.options = options\r\n      plugins.Plugin.prototype._construct.call(this,elm,options);\r\n\r\n      let $el = this.$(),\r\n          selectors = this.options.selectors;\r\n\r\n      this.$video = this.elmx().find(selectors.video);\r\n\r\n      this.$videoControls = $el.find(selectors.videoControls);\r\n\r\n      //this._playButton = $el.find(selectors.playButton)[0];\r\n      //this._playbackIcons = $el.find(selectors.playbackIcons);\r\n      this._playControl = PlayControl.instantiate($el.find(selectors.playButton)[0],{\r\n        media : this.$video\r\n      });\r\n\r\n\r\n      //this._timeElapsed = $el.find(selectors.timeElapsed)[0];\r\n      //this._duration = $el.find(selectors.duration)[0];\r\n      this._timeControl = TimeControl.instantiate($el.find(selectors.timeControl)[0],{\r\n        media : this.$video        \r\n      });\r\n      \r\n      //this._progressBar = $el.find(selectors.progressBar)[0];\r\n      //this._seek = $el.find(selectors.seek)[0];\r\n      //this._seekTooltip = $el.find(selectors.seekTooltip)[0];\r\n      this._progressControl = ProgressControl.instantiate($el.find(selectors.progressControl)[0],{\r\n        media : this.$video        \r\n      });\r\n\r\n      //this._volumeButton = $el.find(selectors.volumeButton)[0];\r\n      //this._volumeIcons = $el.find(selectors.volumeIcons);\r\n      //this._volumeMute = $el.find(selectors.volumeMute)[0];\r\n      //this._volumeLow = $el.find(selectors.volumeLow)[0];\r\n      //this._volumeHigh = $el.find(selectors.volumeHigh)[0];\r\n      //this._volume = $el.find(selectors.volume)[0];\r\n      this._volumeControl = VolumeControl.instantiate($el.find(selectors.volumeControl)[0],{\r\n        media : this.$video        \r\n      });\r\n      \r\n      //this._playbackAnimation = $el.find(selectors.playbackAnimation)[0];\r\n      this._playbackAnimation = PlaybackAnimation.instantiate($el.find(selectors.playbackAnimation)[0],{\r\n        media : this.$video        \r\n      });\r\n      \r\n      //this._fullscreenButton = $el.find(selectors.fullscreenButton)[0];\r\n      //this._fullscreenIcons = $el.find(selectors.fullscreenIcons);\r\n      this._fullscreen = Fullscreen.instantiate($el.find(selectors.fullscreenButton)[0],{\r\n        target : this.elmx()\r\n      });\r\n      \r\n      //this._pipButton = $el.find(selectors.pipButton)[0];\r\n      this._pip = Pip.instantiate($el.find(selectors.pipButton)[0],{\r\n        target : this.$video        \r\n      });\r\n\r\n      // Add eventlisteners here\r\n      this.listenTo($(this._videoControls),'mouseenter',this.showControls);\r\n      this.listenTo($(this._videoControls),'mouseleave',this.hideControls);\r\n      /*\r\n      this.listenTo($(this._playButton),'click', this.togglePlay);\r\n      this.listenTo($(this._video),'play',this.updatePlayButton);\r\n      this.listenTo($(this._video),'pause',this.updatePlayButton);\r\n      this.listenTo($(this._video),'loadedmetadata',this.initializeVideo);\r\n      this.listenTo($(this._video),'timeupdate',this.updateTimeElapsed);\r\n      this.listenTo($(this._video),'timeupdate',this.updateProgress);\r\n      this.listenTo($(this._video),'volumechange',this.updateVolumeIcon);\r\n      this.listenTo($(this._video),'click',this.togglePlay);\r\n      this.listenTo($(this._video),'click',this.animatePlayback);\r\n      this.listenTo($(this._video),'mouseenter',this.showControls);\r\n      this.listenTo($(this._video),'mouseleave',this.hideControls);\r\n      this.listenTo($(this._seek),'mousemove',this.updateSeekTooltip);\r\n      this.listenTo($(this._seek),'input',this.skipAhead);\r\n      this.listenTo($(this._volume),'input',this.updateVolume);\r\n      this.listenTo($(this._volumeButton),'click',this.toggleMute);\r\n      this.listenTo($(this._fullscreenButton),'click',this.toggleFullScreen);\r\n      this.listenTo($el,'fullscreenchange,webkitfullscreenchange',this.updateFullscreenButton);\r\n      this.listenTo($(this._pipButton),'click',this.togglePip);\r\n\r\n      if (!('pictureInPictureEnabled' in document)) {\r\n          this._pipButton.classList.add('hidden');\r\n      }\r\n      */\r\n      this.listenTo($(document),'keyup',this.keyboardShortcuts);\r\n      \r\n      const videoWorks = !!document.createElement('video').canPlayType;\r\n      if (videoWorks) {\r\n        this.$video.controls(false);\r\n        this.$videoControls.show();\r\n      }\r\n\r\n      this.load();\r\n    },\r\n\r\n    source : function(media) {\r\n      this._media = media;\r\n      let title = media.title || \"\",\r\n          url = media.href,\r\n          type = media.type,\r\n          posterUrl = media.poster || \"\",\r\n          altText = media.altText || \"\";\r\n\r\n      let $el = this.$(),\r\n          video = this._video,\r\n          $play = this._$play,\r\n          $poster = this._$poster;\r\n\r\n      $el.prop(\"title\", title);\r\n      \r\n      if (video.canPlayType) {\r\n        if (url && type && video.canPlayType(type)) {\r\n          video.src = url\r\n        }    \r\n      }\r\n\r\n      video.poster = posterUrl\r\n      \r\n      $poster.prop({\r\n        \"src\" : posterUrl,\r\n        \"alt\" : altText\r\n      });\r\n\r\n      $play.prop({\r\n        'download' :  title,\r\n        \"href\" : url\r\n      });\r\n    \r\n    },\r\n\r\n    load : function() {\r\n      this.$video.load();\r\n    },\r\n\r\n    play : function() {\r\n      this.$video.play();\r\n\r\n    },\r\n\r\n    stop : function() {\r\n      this.$video.stop();\r\n    },\r\n\r\n    pause : function() {\r\n      this.$video.pause();      \r\n    },\r\n\r\n    // togglePlay toggles the playback state of the video.\r\n    // If the video playback is paused or ended, the video is played\r\n    // otherwise, the video is paused\r\n    togglePlay : function () {\r\n      if (this.$video.paused() || this.$video.ended()) {\r\n        this.$video.play();\r\n      } else {\r\n        this.$video.pause();\r\n      }\r\n    },\r\n\r\n\r\n    // hideControls hides the video controls when not in use\r\n    // if the video is paused, the controls must remain visible\r\n    hideControls : function () {\r\n      if (this.$video.paused()) {\r\n        return;\r\n      }\r\n\r\n      styler.addClass(this._videoControls,'hide');\r\n    },\r\n\r\n    // showControls displays the video controls\r\n    showControls : function () {\r\n      styler.removeClass(this._videoControls,'hide');\r\n    },\r\n\r\n    // keyboardShortcuts executes the relevant functions for\r\n    // each supported shortcut key\r\n    keyboardShortcuts : function (event) {\r\n      const { key } = event;\r\n      switch (key) {\r\n        case 'k':\r\n          this.togglePlay();\r\n          this._playbackAnimation.animatePlayback();\r\n          if (this.$video.paused()) {\r\n            this.showControls();\r\n          } else {\r\n            setTimeout(() => {\r\n              this.hideControls();\r\n            }, 2000);\r\n          }\r\n          break;\r\n        case 'm':\r\n          this._volumeControl.toggleMute();\r\n          break;\r\n        case 'f':\r\n          this._fullscreen.toggleFullScreen();\r\n          break;\r\n        case 'p':\r\n          this._pip.togglePip();\r\n          break;\r\n      }\r\n    }    \r\n\r\n\r\n  });\r\n\r\n  plugins.register(VideoPlayer);\r\n\r\n  return players.VideoPlayer = VideoPlayer;\r\n});\r\n\r\n"]}