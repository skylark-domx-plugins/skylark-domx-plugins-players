{"version":3,"sources":["skylark-domx-plugins-players.js"],"names":[],"mappingsfile":"../skylark-domx-plugins-players.js","sourcesContent":["define('skylark-domx-plugins-players/players',[\r\n    \"skylark-domx-plugins-base/plugins\"\r\n], function(plugins) {\r\n    'use strict';\r\n\r\n\treturn plugins.players = {};\r\n});\r\n\ndefine('skylark-domx-plugins-toggles/Pip',[\r\n  \"skylark-langx\",\r\n  \"skylark-domx-styler\",\r\n  \"skylark-domx-noder\",\r\n  \"skylark-domx-eventer\",\r\n  \"skylark-domx-query\",\r\n  \"skylark-domx-plugins-base\",\r\n  \"./toggles\"\r\n],function(langx,styler,noder, eventer,$ , plugins,toggles) {\r\n\r\n  'use strict'\r\n\r\n  var Pip = plugins.Plugin.inherit({\r\n    klassName : \"Pip\",\r\n\r\n    pluginName : \"domx.toggles.pip\",\r\n   \r\n    options : {\r\n      classes : {\r\n        mini : \"mini\",\r\n        unmini : \"unmini\"\r\n      },\r\n      selectors : {\r\n        pipButton : null //'.pip-button'\r\n      }\r\n    },\r\n\r\n\r\n    _construct: function(elm, options) {\r\n      //this.options = options\r\n      plugins.Plugin.prototype._construct.call(this,elm,options);\r\n\r\n      let $el = this.$(),\r\n          selectors = this.options.selectors,\r\n          target = this.target = this.elmx(this.options.target);\r\n\r\n      if (selectors.pipButton) {\r\n        this.$pipButton = $el.find(selectors.pipButton);\r\n      } else {\r\n        this.$pipButton = $el;\r\n      }\r\n\r\n\r\n      this.listenTo(this.$pipButton,'click',this.togglePip);\r\n\r\n      if (!('pictureInPictureEnabled' in document)) {\r\n          this.$pipButton.hide();\r\n      }\r\n\r\n    },\r\n\r\n    // togglePip toggles Picture-in-Picture mode on the video\r\n    togglePip : function () {\r\n      try {\r\n        let targetEl = this.target.elm();\r\n        if (targetEl !== noder.pictureInPicture()) {\r\n          this.$pipButton.disabled(true);\r\n          noder.pictureInPicture(targetEl)\r\n        } else {\r\n          noder.pictureInPicture(false)\r\n        }\r\n      } catch (error) {\r\n        console.error(error);\r\n      } finally {\r\n        this.$pipButton.disabled(false);\r\n      }\r\n    },\r\n\r\n  });\r\n\r\n  plugins.register(Pip);\r\n\r\n  return toggles.Pip = Pip;\r\n});\r\n\r\n\ndefine('skylark-domx-plugins-players/play-control',[\r\n  \"skylark-langx\",\r\n  \"skylark-domx-styler\",\r\n  \"skylark-domx-noder\",\r\n  \"skylark-domx-eventer\",\r\n  \"skylark-domx-query\",\r\n  \"skylark-domx-plugins-base\",\r\n  \"./players\"\r\n],function(langx,styler,noder, eventer,$ , plugins,players) {\r\n  'use strict'\r\n\r\n  'use strict'\r\n\r\n  var PlayControl = plugins.Plugin.inherit({\r\n    klassName : \"PlayControl\",\r\n\r\n    pluginName : \"domx.players.play_control\",\r\n   \r\n    options : {\r\n      titles : {\r\n        play  : \"Play (k)\",\r\n        pause : \"Pause (k)\"\r\n      },\r\n      classes : {\r\n        play : \"play\",\r\n        pause : \"pause\"\r\n      },\r\n      selectors : {\r\n        playButton : null\r\n      }\r\n    },\r\n\r\n\r\n    _construct: function(elm, options) {\r\n      //this.options = options\r\n      plugins.Plugin.prototype._construct.call(this,elm,options);\r\n\r\n\r\n      let $el = this.$(),\r\n          selectors = this.options.selectors,\r\n          $media = this._media = this.options.media;\r\n\r\n      if (selectors.playButton) {\r\n        this.$playButton = $el.find(selectors.playButton);   \r\n      } else {\r\n        this.$playButton = $el;\r\n      }\r\n\r\n      this.listenTo($media,'click',this.togglePlay);\r\n      this.listenTo($media,'play,pause',this.updatePlayButton);\r\n      this.listenTo(this.$playButton,'click', this.togglePlay);\r\n      this.updatePlayButton();\r\n    },\r\n\r\n\r\n    play : function() {\r\n      this._media.play();\r\n\r\n    },\r\n\r\n    stop : function() {\r\n      this._media.stop();      \r\n    },\r\n\r\n    pause : function() {\r\n      this._media.pause();      \r\n    },\r\n\r\n    // togglePlay toggles the playback state of the video.\r\n    // If the video playback is paused or ended, the video is played\r\n    // otherwise, the video is paused\r\n    togglePlay : function () {\r\n      if (this._media.paused() || this._media.ended()) {\r\n        this._media.play();\r\n      } else {\r\n        this._media.pause();\r\n      }\r\n    },\r\n\r\n    // updatePlayButton updates the playback icon and tooltip\r\n    // depending on the playback state\r\n    updatePlayButton : function () {\r\n\r\n      if (this._media.paused()) {\r\n        this.$playButton.attr('data-title', this.options.titles.play);\r\n        this.$playButton.removeClass(this.options.classes.pause).addClass(this.options.classes.play);\r\n      } else {\r\n        this.$playButton.attr('data-title', this.options.titles.pause);\r\n        this.$playButton.removeClass(this.options.classes.play).addClass(this.options.classes.pause);\r\n      }\r\n    }\r\n\r\n  });\r\n\r\n  plugins.register(PlayControl);\r\n\r\n  return players.PlayControl = PlayControl;\r\n});\r\n\r\n\ndefine('skylark-domx-plugins-players/playback-animation',[\r\n  \"skylark-langx\",\r\n  \"skylark-domx-styler\",\r\n  \"skylark-domx-noder\",\r\n  \"skylark-domx-eventer\",\r\n  \"skylark-domx-animates\",\r\n  \"skylark-domx-query\",\r\n  \"skylark-domx-plugins-base\"\r\n],function(langx,styler,noder, eventer,animates,$ , plugins) {\r\n\r\n  'use strict'\r\n\r\n  var PlaybackAnimation = plugins.Plugin.inherit({\r\n    klassName : \"PlaybackAnimation\",\r\n\r\n    pluginName : \"domx.players.playback_animation\",\r\n   \r\n    options : {\r\n      classes : {\r\n        play : \"play\",\r\n        pause : \"pause\"\r\n      },\r\n      selectors : {\r\n        playbackAnimation : null //'.playback-animation'\r\n\r\n      }\r\n    },\r\n\r\n\r\n    _construct: function(elm, options) {\r\n      //this.options = options\r\n      plugins.Plugin.prototype._construct.call(this,elm,options);\r\n\r\n      let $el = this.$(),\r\n          selectors = this.options.selectors,\r\n          $media = this._media = this.options.media;\r\n\r\n\r\n\r\n      if (selectors.playbackAnimation) {\r\n        this.$playbackAnimation = $el.find(selectors.playbackAnimation);\r\n      } else {\r\n        this.$playbackAnimation = $el;\r\n      }\r\n\r\n\r\n      this.listenTo($media,'click',this.animatePlayback);\r\n\r\n\r\n    },\r\n\r\n    // animatePlayback displays an animation when\r\n    // the video is played or paused\r\n    animatePlayback : function () {\r\n    // updatePlayButton updates the playback icon and tooltip\r\n    // depending on the playback state\r\n      if (this._media.paused()) {\r\n        this.$playbackAnimation.removeClass(this.options.classes.play).addClass(this.options.classes.pause);\r\n      } else {\r\n        this.$playbackAnimation.removeClass(this.options.classes.pause).addClass(this.options.classes.play);\r\n      }\r\n\r\n      this.$playbackAnimation.animate(\r\n        [\r\n          {\r\n            opacity: 1,\r\n            transform: 'scale(1)',\r\n          },\r\n          {\r\n            opacity: 0,\r\n            transform: 'scale(1.3)',\r\n          },\r\n        ],\r\n        {\r\n          duration: 500,\r\n        }\r\n      );\r\n    }\r\n\r\n\r\n  });\r\n\r\n  plugins.register(PlaybackAnimation);\r\n\r\n  return PlaybackAnimation;\r\n});\r\n\r\n\ndefine('skylark-domx-plugins-players/progress-control',[\r\n  \"skylark-langx\",\r\n  \"skylark-domx-styler\",\r\n  \"skylark-domx-noder\",\r\n  \"skylark-domx-eventer\",\r\n  \"skylark-domx-query\",\r\n  \"skylark-domx-plugins-base\",\r\n  \"./players\"\r\n],function(langx,styler,noder, eventer,$ , plugins,players) {\r\n  'use strict'\r\n\r\n  var ProgressControl = plugins.Plugin.inherit({\r\n    klassName : \"ProgressControl\",\r\n\r\n    pluginName : \"domx.players.progress_control\",\r\n   \r\n    options : {\r\n      selectors : {\r\n        progressBar : '.progress-bar',\r\n        seek : '.seek',\r\n        seekTooltip : '.seek-tooltip'\r\n      }\r\n    },\r\n\r\n\r\n    _construct: function(elm, options) {\r\n      plugins.Plugin.prototype._construct.call(this,elm,options);\r\n\r\n      let $el = this.$(),\r\n          selectors = this.options.selectors,\r\n          $media = this._media = this.options.media;\r\n\r\n\r\n      this.$progressBar = $el.find(selectors.progressBar);\r\n      this.$seek = $el.find(selectors.seek);\r\n      this.$seekTooltip = $el.find(selectors.seekTooltip);\r\n\r\n      // Add eventlisteners here\r\n      this.listenTo($media,'timeupdate',this.updateProgress);\r\n      this.listenTo(this.$seek,'mousemove',this.updateSeekTooltip);\r\n      this.listenTo(this.$seek,'input',this.skipAhead);\r\n\r\n      this.listenTo($media,'loadedmetadata',this.updateDuration);\r\n\r\n    },\r\n\r\n    // formatTime takes a time length in seconds and returns the time in\r\n    // minutes and seconds\r\n    formatTime : function (timeInSeconds) {\r\n      const result = new Date(timeInSeconds * 1000).toISOString().substr(11, 8);\r\n\r\n      return {\r\n        minutes: result.substr(3, 2),\r\n        seconds: result.substr(6, 2),\r\n      };\r\n    },\r\n\r\n    // initializeVideo sets the video duration, and maximum value of the\r\n    // progressBar\r\n    updateDuration : function () {\r\n    \tvar media = this._media;\r\n     \tconst duration = Math.round(media.duration());    \t\t\r\n     \tthis.$seek.attr('max', duration);\r\n     \tthis.$progressBar.attr('max', duration);\r\n    },\r\n\r\n\r\n    // updateProgress indicates how far through the video\r\n    // the current playback is by updating the progress bar\r\n    updateProgress : function () {\r\n\t\t  var media = this._media,\r\n\t\t\tcurrentTime = Math.floor(media.currentTime());\r\n      \tthis.$seek.val(currentTime);\r\n      \tthis.$progressBar.val(currentTime);\r\n    },\r\n\r\n    // updateSeekTooltip uses the position of the mouse on the progress bar to\r\n    // roughly work out what point in the video the user will skip to if\r\n    // the progress bar is clicked at that point\r\n    updateSeekTooltip : function (event) {\r\n      const skipTo = Math.round(\r\n        (event.offsetX / event.target.clientWidth) *\r\n          parseInt(event.target.getAttribute('max'), 10)\r\n      );\r\n      this.$seek.attr('seek', skipTo);\r\n      const t = this.formatTime(skipTo);\r\n      this.$seekTooltip.text(`${t.minutes}:${t.seconds}`);\r\n      //const rect = this._media.getBoundingClientRect();\r\n      const pos = this._media.pagePosition();\r\n      this.$seekTooltip.css(\"left\", `${event.pageX - pos.left}px`);\r\n    },\r\n\r\n    // skipAhead jumps to a different point in the video when the progress bar\r\n    // is clicked\r\n    skipAhead : function (event) {\r\n      const skipTo = event.target.dataset.seek\r\n        ? event.target.dataset.seek\r\n        : event.target.value;\r\n\r\n      let media = this._media;\r\n      media.currentTime(skipTo);\r\n      this.$progressBar.val(skipTo);\r\n      this.$seek.val(skipTo);\r\n    },\r\n\r\n\r\n  });\r\n\r\n  plugins.register(ProgressControl);\r\n\r\n  return players.ProgressControl = ProgressControl;\r\n});\ndefine('skylark-domx-plugins-players/time-control',[\r\n  \"skylark-langx\",\r\n  \"skylark-domx-styler\",\r\n  \"skylark-domx-noder\",\r\n  \"skylark-domx-eventer\",\r\n  \"skylark-domx-query\",\r\n  \"skylark-domx-plugins-base\"\r\n],function(langx,styler,noder, eventer,$ , plugins) {\r\n\r\n  'use strict'\r\n\r\n  var TimeControl = plugins.Plugin.inherit({\r\n    klassName : \"TimeControl\",\r\n\r\n    pluginName : \"domx.players.time_control\",\r\n   \r\n    options : {\r\n      selectors : {\r\n        timeElapsed : '.time-elapsed',\r\n        duration : '.duration'\r\n      }\r\n    },\r\n\r\n\r\n    _construct: function(elm, options) {\r\n      //this.options = options\r\n      plugins.Plugin.prototype._construct.call(this,elm,options);\r\n\r\n      let $el = this.$(),\r\n          selectors = this.options.selectors,\r\n          $media = this._media = this.options.media;\r\n\r\n\r\n      this.$timeElapsed = $el.find(selectors.timeElapsed);\r\n      this.$duration = $el.find(selectors.duration);\r\n\r\n      // Add eventlisteners here\r\n      this.listenTo($media,'timeupdate',this.updateTimeElapsed);\r\n      this.listenTo($media,'loadedmetadata',this.updateDuration);\r\n\r\n    },\r\n\r\n\r\n    // formatTime takes a time length in seconds and returns the time in\r\n    // minutes and seconds\r\n    formatTime : function (timeInSeconds) {\r\n      const result = new Date(timeInSeconds * 1000).toISOString().substr(11, 8);\r\n\r\n      return {\r\n        minutes: result.substr(3, 2),\r\n        seconds: result.substr(6, 2),\r\n      };\r\n    },\r\n\r\n    // initializeVideo sets the video duration, and maximum value of the\r\n    // progressBar\r\n    updateDuration : function () {\r\n      var media = this._media;\r\n      const duration = Math.round(media.duration()),\r\n           time = this.formatTime(duration);\r\n      this.$duration.text(`${time.minutes}:${time.seconds}`);\r\n      this.$duration.attr('datetime', `${time.minutes}m ${time.seconds}s`);\r\n    },\r\n\r\n    // updateTimeElapsed indicates how far through the video\r\n    // the current playback is by updating the timeElapsed element\r\n    updateTimeElapsed : function () {\r\n      const time = this.formatTime(Math.round(this._media.currentTime()));\r\n      this.$timeElapsed.text(`${time.minutes}:${time.seconds}`);\r\n      this.$timeElapsed.attr('datetime', `${time.minutes}m ${time.seconds}s`);\r\n    }\r\n  });\r\n\r\n  plugins.register(TimeControl);\r\n\r\n  return TimeControl;\r\n});\r\n\r\n\ndefine('skylark-domx-plugins-players/volume-control',[\r\n  \"skylark-langx\",\r\n  \"skylark-domx-styler\",\r\n  \"skylark-domx-noder\",\r\n  \"skylark-domx-eventer\",\r\n  \"skylark-domx-query\",\r\n  \"skylark-domx-plugins-base\",\r\n  \"./players\"\r\n],function(langx,styler,noder, eventer,$ , plugins,players) {\r\n\r\n  'use strict'\r\n\r\n  var VolumeControl = plugins.Plugin.inherit({\r\n    klassName : \"VolumeControl\",\r\n\r\n    pluginName : \"domx.players.volume_control\",\r\n   \r\n    options : {\r\n      selectors : {\r\n        volumeButton : '.volume-button',\r\n        volumeIcons : '.volume-button use',\r\n        volumeMute : 'use[href=\"#volume-mute\"]',\r\n        volumeLow : 'use[href=\"#volume-low\"]',\r\n        volumeHigh : 'use[href=\"#volume-high\"]',\r\n        volume : '.volume'\r\n      }\r\n    },\r\n\r\n\r\n    _construct: function(elm, options) {\r\n      //this.options = options\r\n      plugins.Plugin.prototype._construct.call(this,elm,options);\r\n\r\n      this._media = this.options.media;\r\n\r\n      let $el = this.$(),\r\n          selectors = this.options.selectors,\r\n          $media = this._media = this.options.media;\r\n\r\n      this.$volumeButton = $el.find(selectors.volumeButton);\r\n      this.$volumeIcons = $el.find(selectors.volumeIcons);\r\n      this.$volumeMute = $el.find(selectors.volumeMute);\r\n      this.$volumeLow = $el.find(selectors.volumeLow);\r\n      this.$volumeHigh = $el.find(selectors.volumeHigh);\r\n      this.$volume = $el.find(selectors.volume);\r\n\r\n      // Add eventlisteners here\r\n      this.listenTo($media,'volumechange',this.updateVolumeIcon);\r\n      this.listenTo(this.$volume,'input',this.updateVolume);\r\n      this.listenTo(this.$volumeButton,'click',this.toggleMute);\r\n\r\n      this.updateVolumeIcon();\r\n    },\r\n\r\n\r\n    // updateVolume updates the video's volume\r\n    // and disables the muted state if active\r\n    updateVolume : function () {\r\n      if (this._media.muted()) {\r\n        this._media.muted(false);\r\n      }\r\n\r\n      this._media.volume(this.$volume.val());\r\n    },\r\n\r\n    // updateVolumeIcon updates the volume icon so that it correctly reflects\r\n    // the volume of the video\r\n    updateVolumeIcon : function () {\r\n      this.$volumeIcons.forEach((icon) => {\r\n        $(icon).hide();\r\n      });\r\n\r\n      this.$volumeButton.data('title', 'Mute (m)');\r\n\r\n      if (this._media.muted() || this._media.volume() === 0) {\r\n        this.$volumeMute.show();\r\n        this.$volumeButton.data('title', 'Unmute (m)');\r\n      } else if (this._media.volume() > 0 && this._media.volume() <= 0.5) {\r\n        this.$volumeLow.show();\r\n      } else {\r\n        this.$volumeHigh.show();\r\n      }\r\n    },\r\n\r\n    // toggleMute mutes or unmutes the video when executed\r\n    // When the video is unmuted, the volume is returned to the value\r\n    // it was set to before the video was muted\r\n    toggleMute : function () {\r\n      this._media.muted(!this._media.muted());\r\n\r\n      if (this._media.muted()) {\r\n        this.$volume.data('volume', this.$volume.val());\r\n        this.$volume.val(0);\r\n      } else {\r\n        this.$volume.val(this.$volume.data(\"volume\"));\r\n      }\r\n    }\r\n  });\r\n\r\n  plugins.register(VolumeControl);\r\n\r\n  return players.VolumeControl = VolumeControl;\r\n});\r\n\r\n\ndefine('skylark-domx-plugins-players/video-player',[\r\n  \"skylark-langx\",\r\n  \"skylark-domx-styler\",\r\n  \"skylark-domx-noder\",\r\n  \"skylark-domx-eventer\",\r\n  \"skylark-domx-medias\",\r\n  \"skylark-domx-query\",\r\n  \"skylark-domx-plugins-base\",\r\n  \"skylark-domx-plugins-toggles/fullscreen\",\r\n  \"skylark-domx-plugins-toggles/Pip\",\r\n  \"./players\",\r\n  \"./play-control\",\r\n  \"./playback-animation\",\r\n  \"./progress-control\",\r\n  \"./time-control\",\r\n  \"./volume-control\"\r\n],function(langx,styler,noder, eventer,medias,$ , plugins,Fullscreen,Pip,players,PlayControl,PlaybackAnimation,ProgressControl,TimeControl,VolumeControl) {\r\n\r\n  'use strict'\r\n\r\n  var VideoPlayer = plugins.Plugin.inherit({\r\n    klassName : \"VideoPlayer\",\r\n\r\n    pluginName : \"domx.players.video\",\r\n   \r\n    options : {\r\n      selectors : {\r\n        video : 'video',\r\n        videoControls : '.video-controls',\r\n\r\n        playButton : '.play-button',\r\n        playbackIcons : '.playback-icons use',\r\n\r\n        timeControl : \".time\",\r\n        timeElapsed : '.time-elapsed',\r\n        duration : '.duration',\r\n\r\n        progressControl : \".video-progress\",\r\n        progressBar : '.progress-bar',\r\n        seek : '.seek',\r\n        seekTooltip : '.seek-tooltip',\r\n\r\n        volumeControl : \".volume-control\",\r\n        volumeButton : '.volume-button',\r\n        volumeIcons : '.volume-button use',\r\n        volumeMute : 'use[href=\"#volume-mute\"]',\r\n        volumeLow : 'use[href=\"#volume-low\"]',\r\n        volumeHigh : 'use[href=\"#volume-high\"]',\r\n        volume : '.volume',\r\n\r\n        playbackAnimation : '.playback-animation',\r\n\r\n        fullscreenButton : '.fullscreen-button',\r\n        fullscreenIcons : '.fullscreen-button use',\r\n\r\n        pipButton : '.pip-button'\r\n\r\n      }\r\n    },\r\n\r\n\r\n    _construct: function(elm, options) {\r\n      //this.options = options\r\n      plugins.Plugin.prototype._construct.call(this,elm,options);\r\n\r\n      let $el = this.$(),\r\n          selectors = this.options.selectors;\r\n\r\n      this.$video = this.elmx().find(selectors.video);\r\n\r\n      this.$videoControls = $el.find(selectors.videoControls);\r\n\r\n      //this._playButton = $el.find(selectors.playButton)[0];\r\n      //this._playbackIcons = $el.find(selectors.playbackIcons);\r\n      this._playControl = PlayControl.instantiate($el.find(selectors.playButton)[0],{\r\n        media : this.$video\r\n      });\r\n\r\n\r\n      //this._timeElapsed = $el.find(selectors.timeElapsed)[0];\r\n      //this._duration = $el.find(selectors.duration)[0];\r\n      this._timeControl = TimeControl.instantiate($el.find(selectors.timeControl)[0],{\r\n        media : this.$video        \r\n      });\r\n      \r\n      //this._progressBar = $el.find(selectors.progressBar)[0];\r\n      //this._seek = $el.find(selectors.seek)[0];\r\n      //this._seekTooltip = $el.find(selectors.seekTooltip)[0];\r\n      this._progressControl = ProgressControl.instantiate($el.find(selectors.progressControl)[0],{\r\n        media : this.$video        \r\n      });\r\n\r\n      //this._volumeButton = $el.find(selectors.volumeButton)[0];\r\n      //this._volumeIcons = $el.find(selectors.volumeIcons);\r\n      //this._volumeMute = $el.find(selectors.volumeMute)[0];\r\n      //this._volumeLow = $el.find(selectors.volumeLow)[0];\r\n      //this._volumeHigh = $el.find(selectors.volumeHigh)[0];\r\n      //this._volume = $el.find(selectors.volume)[0];\r\n      this._volumeControl = VolumeControl.instantiate($el.find(selectors.volumeControl)[0],{\r\n        media : this.$video        \r\n      });\r\n      \r\n      //this._playbackAnimation = $el.find(selectors.playbackAnimation)[0];\r\n      this._playbackAnimation = PlaybackAnimation.instantiate($el.find(selectors.playbackAnimation)[0],{\r\n        media : this.$video        \r\n      });\r\n      \r\n      //this._fullscreenButton = $el.find(selectors.fullscreenButton)[0];\r\n      //this._fullscreenIcons = $el.find(selectors.fullscreenIcons);\r\n      this._fullscreen = Fullscreen.instantiate($el.find(selectors.fullscreenButton)[0],{\r\n        target : this.elmx()\r\n      });\r\n      \r\n      //this._pipButton = $el.find(selectors.pipButton)[0];\r\n      this._pip = Pip.instantiate($el.find(selectors.pipButton)[0],{\r\n        target : this.$video        \r\n      });\r\n\r\n      // Add eventlisteners here\r\n      this.listenTo($(this._videoControls),'mouseenter',this.showControls);\r\n      this.listenTo($(this._videoControls),'mouseleave',this.hideControls);\r\n      /*\r\n      this.listenTo($(this._playButton),'click', this.togglePlay);\r\n      this.listenTo($(this._video),'play',this.updatePlayButton);\r\n      this.listenTo($(this._video),'pause',this.updatePlayButton);\r\n      this.listenTo($(this._video),'loadedmetadata',this.initializeVideo);\r\n      this.listenTo($(this._video),'timeupdate',this.updateTimeElapsed);\r\n      this.listenTo($(this._video),'timeupdate',this.updateProgress);\r\n      this.listenTo($(this._video),'volumechange',this.updateVolumeIcon);\r\n      this.listenTo($(this._video),'click',this.togglePlay);\r\n      this.listenTo($(this._video),'click',this.animatePlayback);\r\n      this.listenTo($(this._video),'mouseenter',this.showControls);\r\n      this.listenTo($(this._video),'mouseleave',this.hideControls);\r\n      this.listenTo($(this._seek),'mousemove',this.updateSeekTooltip);\r\n      this.listenTo($(this._seek),'input',this.skipAhead);\r\n      this.listenTo($(this._volume),'input',this.updateVolume);\r\n      this.listenTo($(this._volumeButton),'click',this.toggleMute);\r\n      this.listenTo($(this._fullscreenButton),'click',this.toggleFullScreen);\r\n      this.listenTo($el,'fullscreenchange,webkitfullscreenchange',this.updateFullscreenButton);\r\n      this.listenTo($(this._pipButton),'click',this.togglePip);\r\n\r\n      if (!('pictureInPictureEnabled' in document)) {\r\n          this._pipButton.classList.add('hidden');\r\n      }\r\n      */\r\n      this.listenTo($(document),'keyup',this.keyboardShortcuts);\r\n      \r\n      const videoWorks = !!document.createElement('video').canPlayType;\r\n      if (videoWorks) {\r\n        this.$video.controls(false);\r\n        this.$videoControls.show();\r\n      }\r\n\r\n      this.load();\r\n    },\r\n\r\n    source : function(media) {\r\n      this._media = media;\r\n      let title = media.title || \"\",\r\n          url = media.href,\r\n          type = media.type,\r\n          posterUrl = media.poster || \"\",\r\n          altText = media.altText || \"\";\r\n\r\n      let $el = this.$(),\r\n          video = this._video,\r\n          $play = this._$play,\r\n          $poster = this._$poster;\r\n\r\n      $el.prop(\"title\", title);\r\n      \r\n      if (video.canPlayType) {\r\n        if (url && type && video.canPlayType(type)) {\r\n          video.src = url\r\n        }    \r\n      }\r\n\r\n      video.poster = posterUrl\r\n      \r\n      $poster.prop({\r\n        \"src\" : posterUrl,\r\n        \"alt\" : altText\r\n      });\r\n\r\n      $play.prop({\r\n        'download' :  title,\r\n        \"href\" : url\r\n      });\r\n    \r\n    },\r\n\r\n    load : function() {\r\n      this.$video.load();\r\n    },\r\n\r\n    play : function() {\r\n      this.$video.play();\r\n\r\n    },\r\n\r\n    stop : function() {\r\n      this.$video.stop();\r\n    },\r\n\r\n    pause : function() {\r\n      this.$video.pause();      \r\n    },\r\n\r\n    // togglePlay toggles the playback state of the video.\r\n    // If the video playback is paused or ended, the video is played\r\n    // otherwise, the video is paused\r\n    togglePlay : function () {\r\n      if (this.$video.paused() || this.$video.ended()) {\r\n        this.$video.play();\r\n      } else {\r\n        this.$video.pause();\r\n      }\r\n    },\r\n\r\n\r\n    // hideControls hides the video controls when not in use\r\n    // if the video is paused, the controls must remain visible\r\n    hideControls : function () {\r\n      if (this.$video.paused()) {\r\n        return;\r\n      }\r\n\r\n      styler.addClass(this._videoControls,'hide');\r\n    },\r\n\r\n    // showControls displays the video controls\r\n    showControls : function () {\r\n      styler.removeClass(this._videoControls,'hide');\r\n    },\r\n\r\n    // keyboardShortcuts executes the relevant functions for\r\n    // each supported shortcut key\r\n    keyboardShortcuts : function (event) {\r\n      const { key } = event;\r\n      switch (key) {\r\n        case 'k':\r\n          this.togglePlay();\r\n          this._playbackAnimation.animatePlayback();\r\n          if (this.$video.paused()) {\r\n            this.showControls();\r\n          } else {\r\n            setTimeout(() => {\r\n              this.hideControls();\r\n            }, 2000);\r\n          }\r\n          break;\r\n        case 'm':\r\n          this._volumeControl.toggleMute();\r\n          break;\r\n        case 'f':\r\n          this._fullscreen.toggleFullScreen();\r\n          break;\r\n        case 'p':\r\n          this._pip.togglePip();\r\n          break;\r\n      }\r\n    }    \r\n\r\n\r\n  });\r\n\r\n  plugins.register(VideoPlayer);\r\n\r\n  return players.VideoPlayer = VideoPlayer;\r\n});\r\n\r\n\ndefine('skylark-domx-plugins-players/main',[\r\n    \"./players\",\r\n    \"./video-player\"\r\n], function(players) {\r\n    return players;\r\n})\r\n;\ndefine('skylark-domx-plugins-players', ['skylark-domx-plugins-players/main'], function (main) { return main; });\n\n"]}